All the plugs
+ audio file formats (duration)
 Methods to extract duration from a file.
 + FFMPEG
  (no doc)
 + MAD
  (no doc)
 + VORBIS
  (no doc)
 + WAV/AIFF
  (no doc)
+ file decoding
 File decoding methods.
 + AIFF
  Decode as AIFF any file with a correct header.
 + FFMPEG
  Use libffmpeg to decode any file if its MIME type or file extension is appropriate.
 + IMAGE
  Decoder for static images.
 + MAD
  Use libmad to decode any file if its MIME type or file extension is appropriate.
 + META
  (no doc)
 + MIDI
  (no doc)
 + OGG
  Decode a file as OGG provided that libogg accepts it.
 + WAV
  Decode as WAV any file with a correct header.
+ image file decoding
 Image file decoding methods.
 + CAMLIMAGES
  Use camlimages library to decode images.
 + PPM
  Native decoding of PPM images.
+ metadata formats
 Methods to extract metadata from a file.
 + FFMPEG
  (no doc)
 + OGG
  (no doc)
 + TAGLIB
  (no doc)
+ playlist formats
 Method to parse playlist.
 + application/x-cue
  (no doc)
 + application/x-mpegURL
  (no doc)
 + audio/mpegurl
  (no doc)
 + audio/x-mpegurl
  (no doc)
 + audio/x-scpls
  (no doc)
+ protocols
 Methods to get a file. They are the first part of URIs: 'protocol:args'.
 + ANNOTATE
  Add metadata to a request
  + syntax
   annotate:key="val",key2="val2",...:uri
  + static
   false
 + FFMPEG2WAV
  Decode any file to wave using ffmpeg
  + syntax
   ffmpeg2wav:uri
  + static
   false
 + FTP
  Download files using curl
  + syntax
   ftp://...
  + static
   false
 + HTTP
  Download files using curl
  + syntax
   http://...
  + static
   false
 + HTTPS
  Download files using curl
  + syntax
   https://...
  + static
   false
 + MPD
  Finds all files with a tag equal to a given value using mpd.
  + syntax
   mpd:tag=value
  + static
   false
 + POLLY
  Generate speech synthesis using AWS polly service. Result might be mono, needs aws binary in the path.
  + syntax
   polly:Text to read
  + static
   true
 + PROCESS
  Resolve a request using an arbitrary process. @<cmd>@ is interpolated with: @[("input",<input>),("output",<output>),("colon",":")]@. @uri@ is an optional child request, @<output>@ is the name of a fresh temporary file and has extension @.<extname>@. @<input>@ is an optional input file name as returned while resolving @uri@.
  + syntax
   process:<extname>,<cmd>[:uri]
  + static
   false
 + REPLAY_GAIN
  Compute replaygain value using the extract-replaygain script. Adds returned value as @"replay_gain"@ metadata
  + syntax
   replay_gain:uri
  + static
   false
 + S3
  Fetch files from s3 using the AWS CLI
  + syntax
   s3://uri
  + static
   false
 + SAY
  Generate speech synthesis using text2wave and sox. Result is always stereo.
  + syntax
   say:Text to read
  + static
   true
 + TEXT2WAVE
  Generate speech synthesis using text2wave. Result may be mono.
  + syntax
   text2wav:Text to read
  + static
   true
 + TMP
  Mark the given uri as temporary. Useful when chaining protocols
  + syntax
   tmp:uri
  + static
   false
 + YOUTUBE-DL
  Resolve a request using youtube-dl.
  + syntax
   youtube-dl:uri
  + static
   false
+ samplerate converters
 Methods for converting samplerate.
 + libsamplerate
  (no doc)
 + native
  (no doc)
+ scripting values
 scripting values
 + !=
  Comparison of comparable values.
  + _category
   Bool
  + _type
   ('a,'a)->bool where 'a is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
 + %
  <code>pattern % [...,(k,v),...]</code> changes in the pattern occurences of:
 - <code>$(k)</code> into <code>v</code>;
 - <code>$(if $(k2),"a","b")</code> into "a" if k2 is found in the list, "b" otherwise.
  + _category
   String
  + _type
   (string,[(string*string)])->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [(string*string)]
 + *
  Multiplication of numbers.
  + _category
   Math
  + _type
   ('a,'a)->'a where 'a is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
 + +
  Addition of numbers.
  + _category
   Math
  + _type
   ('a,'a)->'a where 'a is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
 + -
  Substraction  of numbers.
  + _category
   Math
  + _type
   ('a,'a)->'a where 'a is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
 + /
  Division of numbers.
  + _category
   Math
  + _type
   ('a,'a)->'a where 'a is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
 + <
  Comparison of comparable values.
  + _category
   Bool
  + _type
   ('a,'a)->bool where 'a is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
 + <=
  Comparison of comparable values.
  + _category
   Bool
  + _type
   ('a,'a)->bool where 'a is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
 + ==
  Comparison of comparable values.
  + _category
   Bool
  + _type
   ('a,'a)->bool where 'a is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
 + >
  Comparison of comparable values.
  + _category
   Bool
  + _type
   ('a,'a)->bool where 'a is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
 + >=
  Comparison of comparable values.
  + _category
   Bool
  + _type
   ('a,'a)->bool where 'a is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
 + ^
  Concatenate strings.
  + _category
   String
  + _type
   (string,string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + _[_]
  l[k] returns the first v such that (k,v) is in the list l (or "" if no such v exists).
  + _category
   List
  + _type
   (string,[(string*string)])->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [(string*string)]
 + abs
  Absolute value.
  + _category
   Math
  + _type
   ('a)->'a where 'a is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
 + acos
  Arc cosine. The argument must fall within the range [-1.0, 1.0]. Result is in radians and is between 0.0 and pi.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + add
  Mix sources, with optional normalization. Only relay metadata from the first source that is effectively summed.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?normalize:bool,?weights:[int],
 [source(audio='#a,video='#b,midi=0)])->
source(audio='#a,video='#b,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + normalize
   (no doc)
   + default
    true
   + type
    bool
  + weights
   Relative weight of the sources in the sum. The empty list stands for the homogeneous distribution.
   + default
    []
   + type
    [int]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [source(audio='#a,video='#b,midi=0)]
 + add_decoder
  Register an external decoder. The encoder should output in WAV format to his standard output (stdout) and read data from its standard input (stdin).
  + _category
   Liquidsoap
  + _type
   (name:string,description:string,?mimes:[string],
 test:((string)->int),string)->unit
  + name
   Format/decoder's name.
   + default
    None
   + type
    string
  + description
   Description of the decoder.
   + default
    None
   + type
    string
  + mimes
   List of mime types supported by this decoder for decoding streams.
   + default
    []
   + type
    [string]
  + test
   Function used to determine if a file should be decoded by the decoder. Returned values are: 0: no decodable audio, -1: decodable audio but number of audio channels unknown, x: fixed number of decodable audio channels.
   + default
    None
   + type
    (string)->int
  + (unlabeled)
   Process to start.
   + default
    None
   + type
    string
 + add_download_protocol
  Register download protocol
  + _flag
   hidden
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (string)->unit
 + add_metadata_resolver
  Register an external file metadata decoder.
  + _category
   Liquidsoap
  + _type
   (string,((string)->[(string*string)]))->unit
  + (unlabeled)
   Format/resolver's name.
   + default
    None
   + type
    string
  + (unlabeled)
   Process to start. The function takes the format and filename as argument and returns a list of (name,value) fields.
   + default
    None
   + type
    (string)->[(string*string)]
 + add_oblivious_decoder
  Register an external file decoder. The encoder should output in WAV format to his standard output (stdout) and read data from the file it receives. The estimated remaining duration for this decoder will be unknown until the @buffer@ last seconds of the file. If possible, it is recommended to decode from stdin and use @add_decoder@.
  + _category
   Liquidsoap
  + _type
   (name:string,description:string,test:((string)->int),
 ?buffer:float,((string)->string))->unit
  + name
   Format/decoder's name.
   + default
    None
   + type
    string
  + description
   Description of the decoder.
   + default
    None
   + type
    string
  + test
   Function used to determine if a file should be decoded by the decoder. Returned values are: 0: no decodable audio, -1: decodable audio but number of audio channels unknown, x: fixed number of decodable audio channels.
   + default
    None
   + type
    (string)->int
  + buffer
   (no doc)
   + default
    5.0
   + type
    float
  + (unlabeled)
   Process to start. The function takes the filename as argument and returns the process to start.
   + default
    None
   + type
    (string)->string
 + add_playlist_parser
  Register a new playlist parser.
  + _category
   Liquidsoap
  + _type
   (format:string,strict:bool,
 ((?pwd:string,string)->[([(string*string)]*string)]))->
unit
  + format
   Playlist format. If possible, a mime-type.
   + default
    None
   + type
    string
  + strict
   True if playlist format can be detected unambiguously.
   + default
    None
   + type
    bool
  + (unlabeled)
   Playlist parser
   + default
    None
   + type
    (?pwd:string,string)->[([(string*string)]*string)]
 + add_protocol
  Register a new protocol.
  + _category
   Liquidsoap
  + _type
   (?temporary:bool,?static:bool,?syntax:string,?doc:string,
 string,
 ((rlog:((string)->unit),maxtime:float,string)->[string]))->
unit
  + temporary
   if true, file is removed when it is finished.
   + default
    false
   + type
    bool
  + static
   if true, then requests can be resolved once and for all. Typically, static protocols can be used to create infallible sources.
   + default
    false
   + type
    bool
  + syntax
   URI syntax.
   + default
    "Undocumented"
   + type
    string
  + doc
   Protocol documentation.
   + default
    "Undocumented"
   + type
    string
  + (unlabeled)
   Protocol name. Resolver will be called on uris of the form: @<protocol name>:...@.
   + default
    None
   + type
    string
  + (unlabeled)
   Protocol resolver. Receives a function to log protocol resolution, the @<arg>@ in @<protocol name>:<arg>@ and the max delay that resolution should take.
   + default
    None
   + type
    (rlog:((string)->unit),maxtime:float,string)->[string]
 + add_skip_command
  Add a skip function to a source when it does not have one by default.
  + _category
   Interaction
  + (unlabeled)
   The source to attach the command to.
   + default
    None
   + type
    source('a)
  + _type
   (source('a))->unit
 + add_timeout
  Call a function in N seconds. If the result of the function is positive or null, the task will be scheduled again after this amount of time (in seconds).
  + _category
   Control
  + _type
   (?fast:bool,float,(()->float))->unit
  + fast
   Set to <code>false</code> if the execution of the code can take long in order to lower its priority below that of request resolutions and fast timeouts. This is only effective if you set a dedicated queue for fast tasks, see the "scheduler" settings for more details.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ()->float
 + amplify
  Multiply the amplitude of the signal.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?override:string,'a,
 source(audio='#b,video='#c,midi='#d))->
source(audio='#b,video='#c,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + override
   Specify the name of a metadata field that, when present and well-formed, overrides the amplification factor for the current track. Well-formed values are floats in decimal notation (e.g. '0.7') which are taken as normal/linear multiplicative factors; values can be passed in decibels with the suffix 'dB' (e.g. '-8.2 dB', but the spaces do not matter).
   + default
    "liq_amplify"
   + type
    string
  + (unlabeled)
   Multiplicative factor.
   + default
    None
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c,midi='#d)
 + and
  Return the conjunction of its arguments
  + _category
   Bool
  + _type
   (bool,bool)->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    bool
 + append
  Append an extra track to every track. Set the metadata 'liq_append' to 'false' to inhibit appending on one track.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?insert_missing:bool,?merge:bool,source('a),
 (([(string*string)])->source('a)))->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + insert_missing
   Treat track beginnings without metadata as having empty one.
   + default
    true
   + type
    bool
  + merge
   Merge the track with its appended track.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + (unlabeled)
   Given the metadata, build the source producing the track to append. This source is allowed to fail (produce nothing) if no relevant track is to be appended.
   + default
    None
   + type
    ([(string*string)])->source('a)
 + argv
  Get command-line parameters.
  + _category
   System
  + _type
   (?default:string,int)->string
  + default
   (no doc)
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    int
 + asin
  Arc sine. The argument must fall within the range [-1.0, 1.0]. Result is in radians and is between -pi/2 and pi/2.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + at
  Restrict a source to play only when a predicate is true.
  + _category
   Source / Track Processing
  + (unlabeled)
   The predicate, typically a time interval such as <code>{10h-10h30}</code>.
   + default
    None
   + type
    ()->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + _type
   ((()->bool),source('a))->source('a)
 + atan
  Arc tangent. Result is in radians and is between -pi/2 and pi/2.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + audio.map
  Map a function to all audio samples. This is SLOW!
  + _category
   Source / Sound Processing
  + _type
   (?id:string,((float)->float),
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + _flag
   hidden
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + audio_to_stereo
  Convert any kind of audio source into a stereo source.
  + _category
   Source / Conversions
  + _type
   (?id:string,source(audio=*+1,video=0,midi=0))->
source(audio=2,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio=*+1,video=0,midi=0)
 + aws_base
  Build a aws base call
  + _flag
   hidden
  + _type
   ()->string
 + base64.decode
  Decode a Base64 encoded string.
  + _category
   String
  + _type
   (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + base64.encode
  Encode a string in Base64.
  + _category
   String
  + _type
   (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + basename
  Get the base name of a path.
  + _category
   System
  + _type
   (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + blank
  Produce silence and blank images.
  + _category
   Source / Input
  + _type
   (?id:string,?duration:float)->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of blank tracks in seconds, default means forever.
   + default
    0.0
   + type
    float
 + bool_of_float
  Convert a float to a bool.
  + _category
   Math
  + _type
   (float)->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + bool_of_int
  Convert an int to a bool.
  + _category
   Math
  + _type
   (int)->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    int
 + bool_of_string
  Convert a string to a bool.
  + _category
   String
  + _type
   (?default:bool,string)->bool
  + default
   (no doc)
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + buffer
  Create a buffer between two different clocks.
  + _category
   Source / Liquidsoap
  + _type
   (?id:string,?buffer:float,?fallible:bool,?max:float,
 ?on_start:(()->unit),?on_stop:(()->unit),?start:bool,
 source('a))->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + buffer
   Amount of data to pre-buffer, in seconds.
   + default
    1.0
   + type
    float
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + max
   Maximum amount of buffered data, in seconds.
   + default
    10.0
   + type
    float
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + start
   Automatically start outputting whenever possible. If true, an infallible (normal) output will start outputting as soon as it is created, and a fallible output will (re)start as soon as its source becomes available for streaming.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + buffer.adaptative
  Create a buffer between two different clocks. The speed of the output is adapted so that no buffer underrun or overrun occurs. This wonderful behavior has a cost: the pitch of the sound might be changed a little.
  + _category
   Source / Liquidsoap
  + _type
   (?id:string,?averaging:float,?buffer:float,
 ?fallible:bool,?limit:float,?max:float,
 ?on_start:(()->unit),?on_stop:(()->unit),?reset:bool,
 ?start:bool,source(audio='#a+1,video=0,midi=0))->
source(audio='#a+1,video=0,midi=0)
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + averaging
   Half-life for the averaging of the buffer size, in seconds.
   + default
    30.0
   + type
    float
  + buffer
   Amount of data to pre-buffer, in seconds.
   + default
    1.0
   + type
    float
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + limit
   Maximum acceleration or deceleration factor.
   + default
    1.25
   + type
    float
  + max
   Maximum amount of buffered data, in seconds.
   + default
    10.0
   + type
    float
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + reset
   Reset speed estimation to 1. when the source becomes available again.
   + default
    false
   + type
    bool
  + start
   Automatically start outputting whenever possible. If true, an infallible (normal) output will start outputting as soon as it is created, and a fallible output will (re)start as soon as its source becomes available for streaming.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video=0,midi=0)
 + clip
  Clip sound.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + clock
  Assign a new clock to the given source (and to other time-dependent sources) and return the source. It is a conveniency wrapper around clock.assign_new(), allowing more concise scripts in some cases.
  + _category
   Liquidsoap
  + sync
   Do not synchronize the clock on regular wallclock time, but try to run as fast as possible (CPU burning mode).
   + default
    true
   + type
    bool
  + id
   (no doc)
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + _type
   (?sync:bool,?id:string,source('a))->source('a)
 + clock.assign_new
  Create a new clock and assign it to a list of sources.
  + _category
   Liquidsoap
  + _type
   (?id:string,?sync:bool,[source('a)])->unit
  + id
   Identifier for the new clock. The default empty string means that the identifier of the first source will be used.
   + default
    ""
   + type
    string
  + sync
   Do not synchronize the clock on regular wallclock time, but try to run as fast as possible (CPU burning mode).
   + default
    true
   + type
    bool
  + (unlabeled)
   List of sources to which the new clock will be assigned
   + default
    None
   + type
    [source('a)]
 + clock.unify
  Enforce that a list of sources all belong to the same clock.
  + _category
   Liquidsoap
  + _type
   ([source('a)])->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [source('a)]
 + comb
  Comb filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?delay:float,?feedback:'a,
 source(audio='#b,video='#c,midi='#d))->
source(audio='#b,video='#c,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + delay
   Delay in seconds.
   + default
    0.001
   + type
    float
  + feedback
   Feedback coefficient in dB.
   + default
    -6.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c,midi='#d)
 + compand
  Compand the signal
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?mu:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + mu
   (no doc)
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + compress
  Compress the signal.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?attack:'a,?gain:'b,?knee:'c,?ratio:float,
 ?release:'d,?rms_window:float,?threshold:'e,
 source(audio='#f,video='#g,midi='#h))->
source(audio='#f,video='#g,midi='#h)
where 'a, 'b, 'c, 'd, 'e is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + attack
   Attack time (ms).
   + default
    100.0
   + type
    anything that is either float or ()->float
  + gain
   Additional gain (dB).
   + default
    0.0
   + type
    anything that is either float or ()->float
  + knee
   Knee radius (dB).
   + default
    1.0
   + type
    anything that is either float or ()->float
  + ratio
   Gain reduction ratio (n:1).
   + default
    2.0
   + type
    float
  + release
   Release time (ms).
   + default
    400.0
   + type
    anything that is either float or ()->float
  + rms_window
   Window for computing RMS (in sec).
   + default
    0.1
   + type
    float
  + threshold
   Threshold level (dB).
   + default
    -10.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#f,video='#g,midi='#h)
 + compress.exponential
  Exponential compressor.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?mu:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + mu
   Exponential compression factor, typically greater than 1.
   + default
    2.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + configure.default_font
  Liquidsoap's default font file.
  + _category
   Liquidsoap
  + _type
   string
 + configure.libdir
  Liquidsoap's library directory.
  + _category
   Liquidsoap
  + _type
   string
 + configure.logdir
  Liquidsoap's logging directory.
  + _category
   Liquidsoap
  + _type
   string
 + configure.rundir
  Liquidsoap's PID file directory.
  + _category
   Liquidsoap
  + _type
   string
 + cos
  Cosine. Argument is in radians.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + cosh
  Hyperbolic cosine. Argument is in radians.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + cross
  Generic cross operator, allowing the composition of the N last seconds of a track with the beginning of the next track.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?active:bool,?conservative:bool,
 ?duration:float,?inhibit:float,?minimum:float,
 ?override:string,((source('a),source('a))->source('a)),
 source('a))->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + active
   The active behavior is to keep ticking the child's clock when the operator is not streaming. Otherwise the child's clock is strictly based on what is streamed off the child source, which results in time-dependent active sources to be frozen when that source is stopped.
   + default
    false
   + type
    bool
  + conservative
   Do not trust remaining time estimations, always buffering data in advance. This avoids being tricked by skips, either manual or caused by skip_blank().
   + default
    true
   + type
    bool
  + duration
   Duration in seconds of the crossed end of track. This value can be changed on a per-file basis using a special metadata field.
   + default
    5.0
   + type
    float
  + inhibit
   Minimum delay between two transitions. It is useful in order to avoid that a transition is triggered on top of another when an end-of-track occurs in the first one. Negative values mean <code>duration+1</code>. Warning: zero inhibition can cause infinite loops.
   + default
    -1.0
   + type
    float
  + minimum
   Minimum duration (in sec.) for a cross: If the track ends without any warning (e.g. in case of skip) there may not be enough data for a decent composition. Set to 0. to avoid having transitions after skips, or more to avoid transitions on short tracks. With the negative default, transitions always occur.
   + default
    -1.0
   + type
    float
  + override
   Metadata field which, if present and containing a float, overrides the 'duration' parameter for current track.
   + default
    "liq_start_next"
   + type
    string
  + (unlabeled)
   Composition of an end of track and the next track.
   + default
    None
   + type
    (source('a),source('a))->source('a)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + crossfade
  Simple crossfade.
  + _category
   Source / Track Processing
  + id
   (no doc)
   + default
    ""
   + type
    string
  + conservative
   Always prepare for a premature end-of-track.
   + default
    true
   + type
    bool
  + start_next
   Duration in seconds of the crossed end of track.
   + default
    5.0
   + type
    float
  + fade_in
   Duration of the fade in for next track.
   + default
    3.0
   + type
    float
  + fade_out
   Duration of the fade out for previous track.
   + default
    3.0
   + type
    float
  + (unlabeled)
   The source to use.
   + default
    None
   + type
    source(audio='#a,video='#b,midi=0)
  + _type
   (?id:string,?conservative:bool,?start_next:float,
 ?fade_in:float,?fade_out:float,
 source(audio='#a,video='#b,midi=0))->
source(audio='#a,video='#b,midi=0)
 + cue_cut
  Start track after a cue in point and stop it at cue out point. The cue points are given as metadata, in seconds from the begining of tracks.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?cue_in_metadata:string,
 ?cue_out_metadata:string,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + cue_in_metadata
   Metadata for cue in points.
   + default
    "liq_cue_in"
   + type
    string
  + cue_out_metadata
   Metadata for cue out points.
   + default
    "liq_cue_out"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + dB_of_lin
  Convert linear scale into decibels.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + delay
  Prevents the child from being ready again too fast after a end of track
  + _category
   Source / Track Processing
  + _type
   (?id:string,?initial:bool,float,source('a))->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + initial
   Start in unavailable state, as if a track had just finished.
   + default
    false
   + type
    bool
  + (unlabeled)
   The source won't be ready less than this amount of seconds after any end of track
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + deprecated
  Deprecated APIs
  + _flag
   hidden
  + _type
   ()->unit
 + dirname
  Get the directory name of a path.
  + _category
   System
  + _type
   (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + download_protocol
  Resolve download protocols using curl
  + _flag
   hidden
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'a
  + rlog
   (no doc)
   + default
    None
   + type
    (string)->'b
  + maxtime
   (no doc)
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'c
  + _type
   ('a,rlog:((string)->'b),maxtime:float,'c)->[string]
 + drop_audio
  Drop all audio channels of a stream.
  + _category
   Source / Conversions
  + _type
   (?id:string,source(audio='#a,video='#b,midi='#c))->
source(audio=0,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + drop_metadata
  Removes all metadata coming from a source.
  + _category
   Source / Track Processing
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + _type
   (source('a))->source('a)
 + drop_midi
  Drop all midi channels of a stream.
  + _category
   Source / Conversions
  + _type
   (?id:string,source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + drop_video
  Drop all video channels of a stream.
  + _category
   Source / Conversions
  + _type
   (?id:string,source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video=0,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + eat_blank
  Eat blanks, i.e., drop the contents of the stream until it is not blank anymore.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?at_beginning:bool,?max_blank:float,
 ?min_noise:float,?start_blank:bool,?threshold:float,
 ?track_sensitive:bool,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + at_beginning
   Only eat at the beginning of a track.
   + default
    false
   + type
    bool
  + max_blank
   Maximum duration of silence allowed, in seconds.
   + default
    20.0
   + type
    float
  + min_noise
   Minimum duration of noise required to end silence, in seconds.
   + default
    0.0
   + type
    float
  + start_blank
   Start assuming we have blank.
   + default
    false
   + type
    bool
  + threshold
   Power in decibels under which the stream is considered silent.
   + default
    -40.0
   + type
    float
  + track_sensitive
   Reset blank counter at each track.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + echo
  Add echo.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?delay:'a,?feedback:'b,?ping_pong:bool,
 source(audio='#c,video='#d,midi='#e))->
source(audio='#c,video='#d,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + delay
   Delay in seconds.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + feedback
   Feedback coefficient in dB (negative).
   + default
    -6.0
   + type
    anything that is either float or ()->float
  + ping_pong
   Use ping-pong delay.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d,midi='#e)
 + empty
  A source that does not produce anything. No silence, no track at all.
  + _category
   Source / Input
  + _type
   (?id:string)->source(audio='a,video='b,midi='c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
 + enable_external_faad_decoder
  Enable or disable external FAAD (AAC/AAC+/M4A) decoders. Does not work on Win32.
Please note that built-in support for faad is available in liquidsoap if compiled and should be preferred over the external decoder.
  + _category
   Liquidsoap
  + _type
   ()->unit
 + enable_external_ffmpeg_decoder
  Enable ffmpeg decoder.
  + _category
   Liquidsoap
  + _type
   ()->unit
 + enable_external_flac_decoder
  Enable external FLAC decoders. Please note that built-in support for FLAC is available in liquidsoap if compiled and should be preferred over the external decoder.
  + _category
   Liquidsoap
  + _type
   ()->unit
 + enable_external_mpc_decoder
  Enable external Musepack decoder.
  + _category
   Liquidsoap
  + _type
   ()->unit
 + enable_replaygain_metadata
  Enable replay gain metadata resolver. This resolver will process any file decoded by liquidsoap and add a replay_gain metadata when this value could be computed. For a finer-grained replay gain processing, use the replay_gain protocol.
  + _category
   Liquidsoap
  + extract_replaygain
   The extraction program
   + default
    "/Users/naaro/.opam/4.07.0/lib/liquidsoap/lib/liquidsoap/1.3.7/extract-replaygain"
   + type
    string
  + _type
   (?extract_replaygain:string)->unit
 + environment
  Return the process environment.
  + _category
   System
  + _type
   ()->[(string*string)]
 + eval
  Evaluate a string as an expression in the toplevel environment.
  + _category
   Liquidsoap
  + _type
   (string)->string
  + _flag
   hidden
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + exe_ext
  Executable file extension.
  + _category
   System
  + _type
   string
 + exec_at
  Execute a given action when a predicate is true. This will be run in background.
  + _category
   System
  + freq
   Frequency for checking the predicate, in seconds.
   + default
    1.0
   + type
    float
  + pred
   Predicate indicating when to execute the function, typically a time interval such as <code>{10h-10h30}</code>.
   + default
    None
   + type
    ()->bool
  + (unlabeled)
   Function to execute when the predicate is true.
   + default
    None
   + type
    ()->unit
  + _type
   (?freq:float,pred:(()->bool),(()->unit))->unit
 + exit
  Immediately stop the application. This should only be used in extreme cases or to specify an exit value. The recommended way of stopping Liquidsoap is to use shutdown.
  + _category
   System
  + _type
   (int)->unit
  + (unlabeled)
   Exit value.
   + default
    None
   + type
    int
 + exp
  Exponential.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + fade.final
  Fade a stream to silence.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?duration:float,?override_duration:string,
 ?override_type:string,?type:string,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the fading. This value can be set on a per-file basis using the metadata field passed as override.
   + default
    3.0
   + type
    float
  + override_duration
   Metadata field which, if present and containing a float, overrides the 'duration' parameter for current track.
   + default
    "liq_fade_final"
   + type
    string
  + override_type
   Metadata field which, if present and correct, overrides the 'type' parameter for current track.
   + default
    "liq_fade_type"
   + type
    string
  + type
   Fader shape (lin|sin|log|exp): linear, sinusoidal, logarithmic or exponential.
   + default
    "lin"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + fade.in
  Fade the beginning of tracks.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?duration:float,?override_duration:string,
 ?override_type:string,?type:string,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the fading. This value can be set on a per-file basis using the metadata field passed as override.
   + default
    3.0
   + type
    float
  + override_duration
   Metadata field which, if present and containing a float, overrides the 'duration' parameter for current track.
   + default
    "liq_fade_in"
   + type
    string
  + override_type
   Metadata field which, if present and correct, overrides the 'type' parameter for current track.
   + default
    "liq_fade_type"
   + type
    string
  + type
   Fader shape (lin|sin|log|exp): linear, sinusoidal, logarithmic or exponential.
   + default
    "lin"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + fade.initial
  Fade the beginning of a stream.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?duration:float,?override_duration:string,
 ?override_type:string,?type:string,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the fading. This value can be set on a per-file basis using the metadata field passed as override.
   + default
    3.0
   + type
    float
  + override_duration
   Metadata field which, if present and containing a float, overrides the 'duration' parameter for current track.
   + default
    "liq_fade_initial"
   + type
    string
  + override_type
   Metadata field which, if present and correct, overrides the 'type' parameter for current track.
   + default
    "liq_fade_type"
   + type
    string
  + type
   Fader shape (lin|sin|log|exp): linear, sinusoidal, logarithmic or exponential.
   + default
    "lin"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + fade.out
  Fade the end of tracks.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?duration:float,?override_duration:string,
 ?override_type:string,?type:string,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the fading. This value can be set on a per-file basis using the metadata field passed as override.
   + default
    3.0
   + type
    float
  + override_duration
   Metadata field which, if present and containing a float, overrides the 'duration' parameter for current track.
   + default
    "liq_fade_out"
   + type
    string
  + override_type
   Metadata field which, if present and correct, overrides the 'type' parameter for current track.
   + default
    "liq_fade_type"
   + type
    string
  + type
   Fader shape (lin|sin|log|exp): linear, sinusoidal, logarithmic or exponential.
   + default
    "lin"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + fail
  Creates a source that fails to produce anything.
  + _category
   Source / Input
  + id
   (no doc)
   + default
    ""
   + type
    string
  + _type
   (?id:string)->source('b)
 + fallback
  At the beginning of each track, select the first ready child.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?replay_metadata:bool,?track_sensitive:'a,
 ?transitions:[(source('b),source('b))->source('b)],
 [source('b)])->source('b)
where 'a is either bool or ()->bool
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + replay_metadata
   Replay the last metadata of a child when switching to it in the middle of a track.
   + default
    true
   + type
    bool
  + track_sensitive
   Re-select only on end of tracks.
   + default
    true
   + type
    anything that is either bool or ()->bool
  + transitions
   Transition functions, padded with <code>fun (x,y) -> y</code> functions.
   + default
    []
   + type
    [(source('b),source('b))->source('b)]
  + (unlabeled)
   Select the first ready source in this list.
   + default
    None
   + type
    [source('b)]
 + fallback.skip
  Special track insensitive fallback that always skips current song before switching.
  + _category
   Source / Track Processing
  + input
   The input source
   + default
    None
   + type
    source('a)
  + (unlabeled)
   The fallback source
   + default
    None
   + type
    source('a)
  + _type
   (input:source('a),source('a))->source('a)
 + ffmpeg2wav_protocol
  Register ffmpeg2wav
  + _flag
   hidden
  + rlog
   (no doc)
   + default
    None
   + type
    (string)->'a
  + maxtime
   (no doc)
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (rlog:((string)->'a),maxtime:float,string)->[string]
 + file.contents
  Read the whole contents of a file.
  + _category
   System
  + _type
   (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + file.duration
  Compute the duration in seconds of audio data contained in a file. The computation may be expensive. Returns -1. if computation failed, typically if the file was not recognized as valid audio.
  + _category
   Liquidsoap
  + _type
   (string)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + file.exists
  Returns true if the file or directory exists.
  + _category
   System
  + _type
   (string)->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + file.extension
  Returns a file's extension.
  + _category
   System
  + _type
   (?dir_sep:string,string)->string
  + dir_sep
   Directory separator.
   + default
    "/"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + file.is_directory
  Returns true if the file exists and is a directory.
  + _category
   System
  + _type
   (string)->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + file.mime
  Get the MIME type of a file, according to libmagic.
  + _category
   Liquidsoap
  + _type
   (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + file.mime_default
  Alias of file.mime (because it is available)
  + _category
   System
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (string)->string
 + file.temp
  Return a fresh temporary filename in the temporary directory.
  + _category
   System
  + _type
   (string,string)->string
  + (unlabeled)
   File prefix
   + default
    None
   + type
    string
  + (unlabeled)
   File suffix
   + default
    None
   + type
    string
 + file.watch
  Call a function when a file is modified. Returns unwatch function.
  + _category
   System
  + _type
   (string,(()->unit))->()->unit
  + (unlabeled)
   File to watch.
   + default
    None
   + type
    string
  + (unlabeled)
   Handler function.
   + default
    None
   + type
    ()->unit
 + filter
  Perform several kinds of filtering on the signal
  + _category
   Source / Sound Processing
  + _type
   (?id:string,freq:'a,mode:string,?q:'b,?wetness:'c,
 source(audio='#d,video='#e,midi='#f))->
source(audio='#d,video='#e,midi='#f)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + freq
   (no doc)
   + default
    None
   + type
    anything that is either float or ()->float
  + mode
   Available modes are 'low' (for low-pass filter), 'high' (for high-pass filter), 'band' (for band-pass filter) and 'notch' (for notch / band-stop / band-rejection filter).
   + default
    None
   + type
    string
  + q
   (no doc)
   + default
    1.0
   + type
    anything that is either float or ()->float
  + wetness
   How much of the original signal should be added (1. means only filtered and 0. means only original signal).
   + default
    1.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#d,video='#e,midi='#f)
 + filter.fir
  Low-pass FIR filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,beta:float,?coeffs:int,frequency:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + beta
   Beta should range between 0 and 1.
   + default
    None
   + type
    float
  + coeffs
   Number of coefficients
   + default
    255
   + type
    int
  + frequency
   Corner frequency in Hz (frequency at which the response is 0.5, that is -6 dB).
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.butterworth.bandpass
  IIR filter
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency1:float,frequency2:float,?order:int,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency1
   First corner frequency
   + default
    None
   + type
    float
  + frequency2
   Second corner frequency
   + default
    None
   + type
    float
  + order
   Filter order
   + default
    4
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.butterworth.bandstop
  IIR filter
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency1:float,frequency2:float,?order:int,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency1
   First corner frequency
   + default
    None
   + type
    float
  + frequency2
   Second corner frequency
   + default
    None
   + type
    float
  + order
   Filter order
   + default
    4
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.butterworth.high
  IIR filter
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?order:int,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Corner frequency
   + default
    None
   + type
    float
  + order
   Filter order
   + default
    4
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.butterworth.low
  IIR filter
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?order:int,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Corner frequency
   + default
    None
   + type
    float
  + order
   Filter order
   + default
    4
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.eq.allpass
  All pass biquad filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?bandwidth:float,frequency:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + bandwidth
   Bandwidth (in octaves)
   + default
    0.333333333333
   + type
    float
  + frequency
   Center frequency
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.eq.bandpass
  Band pass biquad filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?q:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Center frequency
   + default
    None
   + type
    float
  + q
   Q
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.eq.high
  High pass biquad filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?q:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Corner frequency
   + default
    None
   + type
    float
  + q
   Q
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.eq.highshelf
  High shelf biquad filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?slope:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Center frequency
   + default
    None
   + type
    float
  + slope
   Shelf slope (in dB/octave)
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.eq.low
  Low pass biquad filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?q:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Corner frequency
   + default
    None
   + type
    float
  + q
   Q
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.eq.lowshelf
  Low shelf biquad filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?slope:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Corner frequency
   + default
    None
   + type
    float
  + slope
   Shelf slope (dB/octave)
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.eq.notch
  Band pass biquad filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?q:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Center frequency
   + default
    None
   + type
    float
  + q
   Q
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.eq.peak
  Peak EQ biquad filter.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?gain:float,?q:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Center frequency
   + default
    None
   + type
    float
  + gain
   Gain (in dB)
   + default
    1.0
   + type
    float
  + q
   Q
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.resonator.allpass
  IIR filter
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?q:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Corner frequency
   + default
    None
   + type
    float
  + q
   Quality factor
   + default
    60.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.resonator.bandpass
  IIR filter
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?q:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Corner frequency
   + default
    None
   + type
    float
  + q
   Quality factor
   + default
    60.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.iir.resonator.bandstop
  IIR filter
  + _category
   Source / Sound Processing
  + _type
   (?id:string,frequency:float,?q:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + frequency
   Corner frequency
   + default
    None
   + type
    float
  + q
   Quality factor
   + default
    60.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + filter.rc
  First-order filter (RC filter).
  + _category
   Source / Sound Processing
  + _type
   (?id:string,mode:string,rc:'a,?wetness:'b,
 source(audio='#c,video='#d,midi='#e))->
source(audio='#c,video='#d,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + mode
   Available modes are 'low' (for low-pass filter), 'high' (for high-pass filter).
   + default
    None
   + type
    string
  + rc
   Time constant (in seconds).
   + default
    None
   + type
    anything that is either float or ()->float
  + wetness
   How much of the original signal should be added (1. means only filtered and 0. means only original signal).
   + default
    1.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d,midi='#e)
 + flanger
  Flanger effect.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?delay:float,?feedback:'a,?freq:'b,?phase:'c,
 source(audio='#d,video='#e,midi='#f))->
source(audio='#d,video='#e,midi='#f)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + delay
   Delay in seconds.
   + default
    0.001
   + type
    float
  + feedback
   Feedback coefficient in dB.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + freq
   Frequency in Hz.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + phase
   Phase difference between channels in radians.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#d,video='#e,midi='#f)
 + float_of_int
  Convert an int to a float.
  + _category
   Math
  + _type
   (int)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    int
 + float_of_string
  Convert a string to a float.
  + _category
   String
  + _type
   (?default:float,string)->float
  + default
   (no doc)
   + default
    0.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + fst
  Get the first component of a pair.
  + _category
   Pair
  + _type
   (('a*'b))->'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ('a*'b)
 + garbage_collect
  Trigger full major garbage collection.
  + _category
   Liquidsoap
  + _type
   ()->unit
 + get
  Get a setting's value.
  + _category
   Liquidsoap
  + _type
   (default:'a,string)->'a
where 'a is unit, bool, int, float, string or [string]
  + default
   (no doc)
   + default
    None
   + type
    anything that is unit, bool, int, float, string or [string]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + get_clock_status
  Get the current time for all allocated clocks.
  + _category
   Liquidsoap
  + _type
   ()->[(string*int)]
 + get_mime
  Generic mime test. First try to use file.mime if it exist.  Otherwise try to get the value using the file binary. Returns "" (empty string) if no value can be found.
  + _category
   System
  + (unlabeled)
   The file to test
   + default
    None
   + type
    string
  + _type
   (string)->string
 + get_process_lines
  Perform a shell call and return the list of its output lines.
  + _category
   System
  + timeout
   Cancel process after @timeout@ has elapsed. Ignored if negative.
   + default
    -1.0
   + type
    float
  + env
   Process environment
   + default
    []
   + type
    [(string*string)]
  + inherit_env
   Inherit calling process's environment when @env@ parameter is empty.
   + default
    true
   + type
    bool
  + (unlabeled)
   Command to run
   + default
    None
   + type
    string
  + _type
   (?timeout:float,?env:[(string*string)],?inherit_env:bool,
 string)->[string]
 + get_process_output
  Perform a shell call and return its output.
  + _category
   System
  + timeout
   Cancel process after @timeout@ has elapsed. Ignored if negative.
   + default
    -1.0
   + type
    float
  + env
   Process environment
   + default
    []
   + type
    [(string*string)]
  + inherit_env
   Inherit calling process's environment when @env@ parameter is empty.
   + default
    true
   + type
    bool
  + (unlabeled)
   Command to run
   + default
    None
   + type
    string
  + _type
   (?timeout:float,?env:[(string*string)],?inherit_env:bool,
 string)->string
 + getenv
  Get the value associated to a variable in the process environment. Return "" if variable is not set.
  + _category
   System
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (string)->string
 + getopt
  Parse command line options:
<code>getopt("-o")</code> returns "1" if "-o" was passed without any parameter, "0" otherwise.
<code>getopt(default="X","-o")</code> returns "Y" if "-o Y" was passed, "X" otherwise.
The result is removed from the list of arguments, affecting subsequent
calls to <code>argv()</code> and <code>getopt()</code>.
  + _category
   System
  + _type
   (?default:string,string)->string
  + default
   (no doc)
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + getpid
  Get the process' pid.
  + _category
   System
  + _type
   ()->int
 + gettimeofday
  Return the current time since 00:00:00 GMT, Jan. 1, 1970, in seconds.
  + _category
   System
  + _type
   ()->float
 + gmtime
  Convert a time in seconds into a date in the UTC time zone and execute passed callback with the result. Fields meaning same as POSIX's @tm struct@. Warning: "year" is: year - 1900, i.e. 117 for 2017!
  + _category
   System
  + _type
   (float,
 ((sec:int,min:int,hour:int,mday:int,mon:int,year:int,
   wday:int,yday:int,isdst:bool)->'a))->'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    (sec:int,min:int,hour:int,mday:int,mon:int,year:int,
 wday:int,yday:int,isdst:bool)->'a
 + harbor.http.register
  Register a HTTP handler on the harbor. The given function receives as argument the full requested uri (e.g. "foo?var=bar"), http protocol version, possible input data and the list of HTTP headers and returns the answer sent to the client, including HTTP headers. Registered uri can be regular expressions (e.g. ".+\.php") and can override default metadata handlers.
  + _category
   Liquidsoap
  + _type
   (port:int,method:string,string,
 ((protocol:string,data:string,headers:[(string*string)],
   string)->string))->unit
  + port
   Port to server.
   + default
    None
   + type
    int
  + method
   Accepted method
   + default
    None
   + type
    string
  + (unlabeled)
   URI to serve.
   + default
    None
   + type
    string
  + (unlabeled)
   Function to execute. method argument is "PUT" or "GET", protocol argument is "HTTP/1.1" or "HTTP/1.0" etc., data argument contains data passed in case of a PUT request, and "" otherwise. headers argument contains the HTTP headers. Unlabeled argument contains the requested URI.
   + default
    None
   + type
    (protocol:string,data:string,headers:[(string*string)],
 string)->string
 + harbor.http.remove
  Remove a registered HTTP handler on the harbor.
  + _category
   Liquidsoap
  + _type
   (method:string,port:int,string)->unit
  + method
   Method served.
   + default
    None
   + type
    string
  + port
   Port to server.
   + default
    None
   + type
    int
  + (unlabeled)
   URI served.
   + default
    None
   + type
    string
 + harbor.https.register
  Register a HTTPS handler on the harbor. The given function receives as argument the full requested uri (e.g. "foo?var=bar"), http protocol version, possible input data and the list of HTTP headers and returns the answer sent to the client, including HTTP headers. Registered uri can be regular expressions (e.g. ".+\.php") and can override default metadata handlers.
  + _category
   Liquidsoap
  + _type
   (port:int,method:string,string,
 ((protocol:string,data:string,headers:[(string*string)],
   string)->string))->unit
  + port
   Port to server.
   + default
    None
   + type
    int
  + method
   Accepted method
   + default
    None
   + type
    string
  + (unlabeled)
   URI to serve.
   + default
    None
   + type
    string
  + (unlabeled)
   Function to execute. method argument is "PUT" or "GET", protocol argument is "HTTP/1.1" or "HTTP/1.0" etc., data argument contains data passed in case of a PUT request, and "" otherwise. headers argument contains the HTTP headers. Unlabeled argument contains the requested URI.
   + default
    None
   + type
    (protocol:string,data:string,headers:[(string*string)],
 string)->string
 + harbor.https.remove
  Remove a registered HTTPS handler on the harbor.
  + _category
   Liquidsoap
  + _type
   (method:string,port:int,string)->unit
  + method
   Method served.
   + default
    None
   + type
    string
  + port
   Port to server.
   + default
    None
   + type
    int
  + (unlabeled)
   URI served.
   + default
    None
   + type
    string
 + http.delete
  Perform a full Http DELETE request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?headers:[(string*string)],?timeout:float,string)->
((((string*int)*string)*[(string*string)])*string)
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + http.get
  Perform a full Http GET request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?headers:[(string*string)],?timeout:float,string)->
((((string*int)*string)*[(string*string)])*string)
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + http.head
  Perform a full Http HEAD request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?headers:[(string*string)],?timeout:float,string)->
((((string*int)*string)*[(string*string)])*string)
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + http.post
  Perform a full Http POST request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?data:string,?headers:[(string*string)],?timeout:float,
 string)->
((((string*int)*string)*[(string*string)])*string)
  + data
   POST data.
   + default
    ""
   + type
    string
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + http.put
  Perform a full Http PUT request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?data:string,?headers:[(string*string)],?timeout:float,
 string)->
((((string*int)*string)*[(string*string)])*string)
  + data
   POST data.
   + default
    ""
   + type
    string
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + http_codes
  List of HTTP response codes and statuses.
  + _category
   Interaction
  + _type
   [(string*string)]
 + http_response
  Create a HTTP response string
  + _category
   Interaction
  + protocol
   HTTP protocol used.
   + default
    "HTTP/1.1"
   + type
    string
  + code
   Response code.
   + default
    200
   + type
    int
  + headers
   Response headers.
   + default
    []
   + type
    [(string*string)]
  + data
   Response data
   + default
    ""
   + type
    string
  + _type
   (?protocol:string,?code:int,?headers:[(string*string)],
 ?data:string)->string
 + https.delete
  Perform a full https DELETE request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?headers:[(string*string)],?timeout:float,string)->
((((string*int)*string)*[(string*string)])*string)
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + https.get
  Perform a full https GET request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?headers:[(string*string)],?timeout:float,string)->
((((string*int)*string)*[(string*string)])*string)
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + https.head
  Perform a full https HEAD request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?headers:[(string*string)],?timeout:float,string)->
((((string*int)*string)*[(string*string)])*string)
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + https.post
  Perform a full https POST request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?data:string,?headers:[(string*string)],?timeout:float,
 string)->
((((string*int)*string)*[(string*string)])*string)
  + data
   POST data.
   + default
    ""
   + type
    string
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + https.put
  Perform a full https PUT request and return (status,headers),data.
  + _category
   Interaction
  + _type
   (?data:string,?headers:[(string*string)],?timeout:float,
 string)->
((((string*int)*string)*[(string*string)])*string)
  + data
   POST data.
   + default
    ""
   + type
    string
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + timeout
   Timeout for network operations.
   + default
    10.0
   + type
    float
  + (unlabeled)
   Requested URL, e.g. "http://www.google.com:80/index.html".
   + default
    None
   + type
    string
 + icy.update_metadata
  Update metata on an icecast mountpoint using the ICY protocol.
  + _category
   Interaction
  + _type
   (?host:string,?port:int,?user:string,?password:string,
 ?mount:string,?icy_id:int,?protocol:string,
 ?encoding:string,?headers:[(string*string)],
 [(string*string)])->unit
  + host
   (no doc)
   + default
    "localhost"
   + type
    string
  + port
   (no doc)
   + default
    8000
   + type
    int
  + user
   (no doc)
   + default
    "source"
   + type
    string
  + password
   (no doc)
   + default
    "hackme"
   + type
    string
  + mount
   Source mount point. Mandatory when streaming to icecast.
   + default
    ""
   + type
    string
  + icy_id
   Shoutcast source ID. Only supported by Shoutcast v2.
   + default
    1
   + type
    int
  + protocol
   Protocol to use. One of: "icy", "http" or "https"
   + default
    "http"
   + type
    string
  + encoding
   Encoding used to send metadata, default (UTF-8) if empty.
   + default
    ""
   + type
    string
  + headers
   Additional headers.
   + default
    [("User-Agent","Liquidsoap/1.3.7 (Unix; OCaml 4.07.0)")]
   + type
    [(string*string)]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [(string*string)]
 + id
  Does not do anything, simply forwards its input stream.
  + _category
   Source / Conversions
  + _type
   (?id:string,source('a))->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + if
  The basic conditional.
  + _category
   Control
  + _type
   (bool,then:(()->'a),else:(()->'a))->'a
  + _flag
   hidden
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    bool
  + then
   (no doc)
   + default
    None
   + type
    ()->'a
  + else
   (no doc)
   + default
    None
   + type
    ()->'a
 + ignore
  Convert anything to unit, preventing warnings.
  + _category
   Control
  + _type
   ('a)->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'a
 + in
  Create a source from the first available input driver in pulseaudio, portaudio, oss, alsa, blank.
  + _category
   Source / Input
  + id
   (no doc)
   + default
    ""
   + type
    string
  + start
   (no doc)
   + default
    true
   + type
    bool
  + on_start
   (no doc)
   + default
    {()}
   + type
    ()->unit
  + on_stop
   (no doc)
   + default
    {()}
   + type
    ()->unit
  + fallible
   (no doc)
   + default
    false
   + type
    bool
  + _type
   (?id:string,?start:bool,?on_start:(()->unit),
 ?on_stop:(()->unit),?fallible:bool)->source('a)
 + input.external
  Stream data from an external application.
  + _category
   Source / Input
  + _type
   (?id:string,?buffer:float,?channels:int,?max:float,
 ?restart:bool,?restart_on_error:bool,?samplerate:int,
 string)->source(audio='#a+1,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + buffer
   Duration of the pre-buffered data.
   + default
    2.0
   + type
    float
  + channels
   Number of channels.
   + default
    2
   + type
    int
  + max
   Maximum duration of the buffered data.
   + default
    10.0
   + type
    float
  + restart
   Restart process when exited.
   + default
    true
   + type
    bool
  + restart_on_error
   Restart process when exited with error.
   + default
    false
   + type
    bool
  + samplerate
   Samplerate.
   + default
    44100
   + type
    int
  + (unlabeled)
   Command to execute.
   + default
    None
   + type
    string
 + input.external.avi
  Stream data from an external application.
  + _category
   Source / Input
  + _type
   (?id:string,?buffer:float,?max:float,?restart:bool,
 ?restart_on_error:bool,string)->
source(audio='#a,video='#b,midi=0)
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + buffer
   Duration of the pre-buffered data.
   + default
    1.0
   + type
    float
  + max
   Maximum duration of the buffered data.
   + default
    10.0
   + type
    float
  + restart
   Restart process when exited.
   + default
    true
   + type
    bool
  + restart_on_error
   Restart process when exited with error.
   + default
    false
   + type
    bool
  + (unlabeled)
   Command to execute.
   + default
    None
   + type
    string
 + input.external.rawvideo
  Stream data from an external application.
  + _category
   Source / Input
  + _type
   (?id:string,?buffer:float,?max:float,?restart:bool,
 ?restart_on_error:bool,string)->
source(audio=0,video=1,midi=0)
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + buffer
   Duration of the pre-buffered data.
   + default
    1.0
   + type
    float
  + max
   Maximum duration of the buffered data.
   + default
    10.0
   + type
    float
  + restart
   Restart process when exited.
   + default
    true
   + type
    bool
  + restart_on_error
   Restart process when exited with error.
   + default
    false
   + type
    bool
  + (unlabeled)
   Command to execute.
   + default
    None
   + type
    string
 + input.ffmpeg.video
  No documentation available.
  + _category
   Source / Input
  + id
   (no doc)
   + default
    "input.ffmpeg.video"
   + type
    string
  + restart
   (no doc)
   + default
    true
   + type
    bool
  + restart_on_error
   (no doc)
   + default
    false
   + type
    bool
  + buffer
   (no doc)
   + default
    0.2
   + type
    float
  + max
   (no doc)
   + default
    10.0
   + type
    float
  + format
   (no doc)
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (?id:string,?restart:bool,?restart_on_error:bool,
 ?buffer:float,?max:float,?format:string,string)->
source(audio='#a,video='#b,midi=0)
 + input.harbor
  Retrieves the given http stream from the harbor.
  + _category
   Source / Input
  + _type
   (?id:string,?auth:((string,string)->bool),?buffer:float,
 ?debug:bool,?dumpfile:string,?icy:bool,
 ?icy_metadata_charset:string,?logfile:string,?max:float,
 ?metadata_charset:string,
 ?on_connect:(([(string*string)])->unit),
 ?on_disconnect:(()->unit),?password:string,?port:int,
 ?replay_metadata:bool,?timeout:float,?user:string,
 string)->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + auth
   Authentication function. <code>f(login,password)</code> returns <code>true</code> if the user should be granted access for this login. Override any other method if used.
   + default
    fun (_,_) -> false
   + type
    (string,string)->bool
  + buffer
   Duration of the pre-buffered data.
   + default
    2.0
   + type
    float
  + debug
   Run in debugging mode by not catching some exceptions.
   + default
    false
   + type
    bool
  + dumpfile
   Dump stream to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + icy
   Enable ICY (shoutcast) protocol.
   + default
    false
   + type
    bool
  + icy_metadata_charset
   ICY (shoutcast) metadata charset. Guessed if empty. Default for shoutcast is ISO-8859-1. Set to that value if all your clients send metadata using this charset and automatic detection is not working for you.
   + default
    ""
   + type
    string
  + logfile
   Log buffer status to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + max
   Maximum duration of the buffered data.
   + default
    10.0
   + type
    float
  + metadata_charset
   Metadata charset for non-ICY (shoutcast) source protocols. Guessed if empty.
   + default
    ""
   + type
    string
  + on_connect
   Function to execute when a source is connected. Its receives the list of headers, of the form: (<label>,<value>). All labels are lowercase.
   + default
    fun (_) -> ()
   + type
    ([(string*string)])->unit
  + on_disconnect
   Functions to excecute when a source is disconnected
   + default
    {()}
   + type
    ()->unit
  + password
   Source password.
   + default
    "hackme"
   + type
    string
  + port
   Port used to connect to the source.
   + default
    8005
   + type
    int
  + replay_metadata
   Replay last known metadata when switching back to this source. This helps when source has dropped due to temporary connection issues.
   + default
    false
   + type
    bool
  + timeout
   Timeout for source connectionn.
   + default
    30.0
   + type
    float
  + user
   Source user.
   + default
    "source"
   + type
    string
  + (unlabeled)
   Mountpoint to look for.
   + default
    None
   + type
    string
 + input.harbor.ssl
  Retrieves the given https stream from the harbor.
  + _category
   Source / Input
  + _type
   (?id:string,?auth:((string,string)->bool),?buffer:float,
 ?debug:bool,?dumpfile:string,?icy:bool,
 ?icy_metadata_charset:string,?logfile:string,?max:float,
 ?metadata_charset:string,
 ?on_connect:(([(string*string)])->unit),
 ?on_disconnect:(()->unit),?password:string,?port:int,
 ?replay_metadata:bool,?timeout:float,?user:string,
 string)->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + auth
   Authentication function. <code>f(login,password)</code> returns <code>true</code> if the user should be granted access for this login. Override any other method if used.
   + default
    fun (_,_) -> false
   + type
    (string,string)->bool
  + buffer
   Duration of the pre-buffered data.
   + default
    2.0
   + type
    float
  + debug
   Run in debugging mode by not catching some exceptions.
   + default
    false
   + type
    bool
  + dumpfile
   Dump stream to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + icy
   Enable ICY (shoutcast) protocol.
   + default
    false
   + type
    bool
  + icy_metadata_charset
   ICY (shoutcast) metadata charset. Guessed if empty. Default for shoutcast is ISO-8859-1. Set to that value if all your clients send metadata using this charset and automatic detection is not working for you.
   + default
    ""
   + type
    string
  + logfile
   Log buffer status to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + max
   Maximum duration of the buffered data.
   + default
    10.0
   + type
    float
  + metadata_charset
   Metadata charset for non-ICY (shoutcast) source protocols. Guessed if empty.
   + default
    ""
   + type
    string
  + on_connect
   Function to execute when a source is connected. Its receives the list of headers, of the form: (<label>,<value>). All labels are lowercase.
   + default
    fun (_) -> ()
   + type
    ([(string*string)])->unit
  + on_disconnect
   Functions to excecute when a source is disconnected
   + default
    {()}
   + type
    ()->unit
  + password
   Source password.
   + default
    "hackme"
   + type
    string
  + port
   Port used to connect to the source.
   + default
    8005
   + type
    int
  + replay_metadata
   Replay last known metadata when switching back to this source. This helps when source has dropped due to temporary connection issues.
   + default
    false
   + type
    bool
  + timeout
   Timeout for source connectionn.
   + default
    30.0
   + type
    float
  + user
   Source user.
   + default
    "source"
   + type
    string
  + (unlabeled)
   Mountpoint to look for.
   + default
    None
   + type
    string
 + input.http
  Forwards the given http stream. The relay can be paused/resumed using the start/stop telnet commands.
  + _category
   Source / Input
  + _type
   (?id:string,?autostart:bool,?bind_address:string,
 ?buffer:float,?debug:bool,?force_mime:string,
 ?logfile:string,?max:float,?new_track_on_metadata:bool,
 ?on_connect:(([(string*string)])->unit),
 ?on_disconnect:(()->unit),?playlist_mode:string,
 ?poll_delay:float,?timeout:float,?user_agent:string,
 string)->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + autostart
   Initially start relaying or not.
   + default
    true
   + type
    bool
  + bind_address
   Address to bind on the local machine. This option can be useful if your machine is bound to multiple IPs. Empty means no bind address.
   + default
    ""
   + type
    string
  + buffer
   Duration of the pre-buffered data.
   + default
    2.0
   + type
    float
  + debug
   Run in debugging mode, not catching some exceptions.
   + default
    false
   + type
    bool
  + force_mime
   Force mime data type. Not used if empty.
   + default
    ""
   + type
    string
  + logfile
   Log buffer status to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + max
   Maximum duration of the buffered data.
   + default
    10.0
   + type
    float
  + new_track_on_metadata
   Treat new metadata as new track.
   + default
    true
   + type
    bool
  + on_connect
   Function to execute when a source is connected. Its receives the list of headers, of the form: (<label>,<value>). All labels are lowercase.
   + default
    fun (_) -> ()
   + type
    ([(string*string)])->unit
  + on_disconnect
   Function to excecute when a source is disconnected
   + default
    {()}
   + type
    ()->unit
  + playlist_mode
   Valid modes are "normal", "random", "randomize" and "first". The first ones have the same meaning as for the mode parameter of the playlist operator. The last one discards all entries but the first one.
   + default
    "normal"
   + type
    string
  + poll_delay
   Polling delay when trying to connect to the stream.
   + default
    2.0
   + type
    float
  + timeout
   Timeout for source connectionn.
   + default
    30.0
   + type
    float
  + user_agent
   User agent.
   + default
    "Liquidsoap/1.3.7 (Unix; OCaml 4.07.0)"
   + type
    string
  + (unlabeled)
   URL of an http stream (default port is 80).
   + default
    None
   + type
    string
 + input.https
  Forwards the given https stream. The relay can be paused/resumed using the start/stop telnet commands.
  + _category
   Source / Input
  + _type
   (?id:string,?autostart:bool,?bind_address:string,
 ?buffer:float,?debug:bool,?force_mime:string,
 ?logfile:string,?max:float,?new_track_on_metadata:bool,
 ?on_connect:(([(string*string)])->unit),
 ?on_disconnect:(()->unit),?playlist_mode:string,
 ?poll_delay:float,?timeout:float,?user_agent:string,
 string)->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + autostart
   Initially start relaying or not.
   + default
    true
   + type
    bool
  + bind_address
   Address to bind on the local machine. This option can be useful if your machine is bound to multiple IPs. Empty means no bind address.
   + default
    ""
   + type
    string
  + buffer
   Duration of the pre-buffered data.
   + default
    2.0
   + type
    float
  + debug
   Run in debugging mode, not catching some exceptions.
   + default
    false
   + type
    bool
  + force_mime
   Force mime data type. Not used if empty.
   + default
    ""
   + type
    string
  + logfile
   Log buffer status to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + max
   Maximum duration of the buffered data.
   + default
    10.0
   + type
    float
  + new_track_on_metadata
   Treat new metadata as new track.
   + default
    true
   + type
    bool
  + on_connect
   Function to execute when a source is connected. Its receives the list of headers, of the form: (<label>,<value>). All labels are lowercase.
   + default
    fun (_) -> ()
   + type
    ([(string*string)])->unit
  + on_disconnect
   Function to excecute when a source is disconnected
   + default
    {()}
   + type
    ()->unit
  + playlist_mode
   Valid modes are "normal", "random", "randomize" and "first". The first ones have the same meaning as for the mode parameter of the playlist operator. The last one discards all entries but the first one.
   + default
    "normal"
   + type
    string
  + poll_delay
   Polling delay when trying to connect to the stream.
   + default
    2.0
   + type
    float
  + timeout
   Timeout for source connectionn.
   + default
    30.0
   + type
    float
  + user_agent
   User agent.
   + default
    "Liquidsoap/1.3.7 (Unix; OCaml 4.07.0)"
   + type
    string
  + (unlabeled)
   URL of an https stream (default port is 80).
   + default
    None
   + type
    string
 + input.keyboard
  Play notes from the keyboard.
  + _category
   Source / Input
  + _type
   (?id:string)->source(audio='#a,video=0,midi='#b+1)
  + _flag
   hidden
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
 + input.mencoder.video
  No documentation available.
  + _category
   Source / Input
  + id
   (no doc)
   + default
    "input.mencoder.video"
   + type
    string
  + restart
   (no doc)
   + default
    true
   + type
    bool
  + restart_on_error
   (no doc)
   + default
    false
   + type
    bool
  + buffer
   (no doc)
   + default
    0.2
   + type
    float
  + max
   (no doc)
   + default
    10.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (?id:string,?restart:bool,?restart_on_error:bool,
 ?buffer:float,?max:float,string)->
source(audio=0,video=1,midi=0)
 + input.mplayer
  Stream data from mplayer
  + _category
   Source / Input
  + _category
   Source / Input
  + id
   (no doc)
   + default
    "input.mplayer"
   + type
    string
  + restart
   restart on exit.
   + default
    true
   + type
    bool
  + restart_on_error
   restart on exit with error.
   + default
    false
   + type
    bool
  + buffer
   Duration of the pre-buffered data.
   + default
    0.2
   + type
    float
  + max
   Maximum duration of the buffered data.
   + default
    10.0
   + type
    float
  + (unlabeled)
   data URI.
   + default
    None
   + type
    string
  + _type
   (?id:string,?restart:bool,?restart_on_error:bool,
 ?buffer:float,?max:float,string)->
source(audio='#a+1,video=0,midi=0)
 + input.udp
  Input encoded data from UDP, without any control whatsoever.
  + _category
   Source / Input
  + _type
   (?id:string,?buffer:float,host:string,port:int,string)->
active_source('a)
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + buffer
   Duration of buffered data before starting playout.
   + default
    1.0
   + type
    float
  + host
   (no doc)
   + default
    None
   + type
    string
  + port
   (no doc)
   + default
    None
   + type
    int
  + (unlabeled)
   Mime type.
   + default
    None
   + type
    string
 + insert_metadata
  Dynamically insert metadata in a stream. Returns a pair (f,s) where s is a new source and f is a function of type (metadata)->unit, used to insert metadata in s.
  + _category
   Source / Track Processing
  + _type
   (?id:string,source('a))->
((([(string*string)])->unit)*source('a))
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + int_of_float
  Convert a float to a int.
  + _category
   Math
  + _type
   (float)->int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + int_of_string
  Convert a string to a int.
  + _category
   String
  + _type
   (?default:int,string)->int
  + default
   (no doc)
   + default
    0
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + interactive.bool
  Read a boolean from an interactive input.
  + _category
   Interaction
  + _type
   (string,bool)->()->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    bool
 + interactive.float
  Read a float from an interactive input.
  + _category
   Interaction
  + _type
   (string,float)->()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + interactive.string
  Read a string from an interactive input.
  + _category
   Interaction
  + _type
   (string,string)->()->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + is_directory
  Returns true if the directory exists.
  + _category
   System
  + _type
   (string)->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + json_of
  Convert a value to a json string.
  + _category
   String
  + _type
   (?compact:bool,'a)->string
  + compact
   Output compact text.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'a
 + limit
  Limit the signal.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?attack:'a,?gain:'b,?knee:'c,?ratio:float,
 ?release:'d,?rms_window:float,?threshold:'e,
 source(audio='#f,video='#g,midi='#h))->
source(audio='#f,video='#g,midi='#h)
where 'a, 'b, 'c, 'd, 'e is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + attack
   Attack time (ms).
   + default
    100.0
   + type
    anything that is either float or ()->float
  + gain
   Additional gain (dB).
   + default
    0.0
   + type
    anything that is either float or ()->float
  + knee
   Knee radius (dB).
   + default
    1.0
   + type
    anything that is either float or ()->float
  + ratio
   Gain reduction ratio (n:1).
   + default
    20.0
   + type
    float
  + release
   Release time (ms).
   + default
    400.0
   + type
    anything that is either float or ()->float
  + rms_window
   Window for computing RMS (in sec).
   + default
    0.1
   + type
    float
  + threshold
   Threshold level (dB).
   + default
    -10.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#f,video='#g,midi='#h)
 + lin_of_dB
  Convert decibels into linear scale.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + liquidsoap.version
  Liquidsoap version string.
  + _category
   Liquidsoap
  + _type
   string
 + list.add
  Add an element at the top of a list.
  + _category
   List
  + _type
   ('a,['a])->['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.append
  Catenate two lists.
  + _category
   List
  + _type
   (['a],['a])->['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.assoc
  Generalized l[k] with default value.
  + _category
   List
  + _type
   (default:'a,'b,[('b*'a)])->'a
  + default
   Default value if key does not exist
   + default
    None
   + type
    'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'b
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [('b*'a)]
 + list.filter
  Filter a list according to a filtering function.
  + _category
   List
  + _type
   ((('a)->bool),['a])->['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ('a)->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.filter_assoc
  list.filter_assoc(key,l) returns all the elements of the form (key, value) from l.
  + _category
   List
  + (unlabeled)
   Key to look for
   + default
    None
   + type
    anything that is an orderable type
  + (unlabeled)
   List of pairs (key,value)
   + default
    None
   + type
    [('a*'b)] where 'a is an orderable type
  + _type
   ('a,[('a*'b)])->[('a*'b)] where 'a is an orderable type
 + list.fold
  Fold a function on every element of a list: list.fold(f,x1,[e1,..,en]) is f(...f(f(x1,e1),e2)...,en).
  + _category
   List
  + _type
   ((('a,'b)->'a),'a,['b])->'a
  + (unlabeled)
   Function f for which f(x,e) which will be called on every element e with the current value of x, returning the new value of x.
   + default
    None
   + type
    ('a,'b)->'a
  + (unlabeled)
   Initial value x1, to be updated by successive calls of f(x,e).
   + default
    None
   + type
    'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['b]
 + list.hd
  Return the head (first element) of a list, or 'default' if the list is empty.
  + _category
   List
  + _type
   (default:'a,['a])->'a
  + default
   Default value if key does not exist
   + default
    None
   + type
    'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.iter
  Call a function on every element of a list.
  + _category
   List
  + _type
   ((('a)->unit),['a])->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ('a)->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.length
  Get the length of a list, i.e. its number of elements.
  + _category
   List
  + _type
   (['a])->int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.map
  Map a function on every element of a list.
  + _category
   List
  + _type
   ((('a)->'b),['a])->['b]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ('a)->'b
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.mapi
  Map a function on every element of a list, along with its index.
  + _category
   List
  + _type
   (((int,'a)->'b),['a])->['b]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    (int,'a)->'b
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.mem
  Check if an element belongs to a list.
  + _category
   List
  + _type
   ('a,['a])->bool where 'a is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is an orderable type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a] where 'a is an orderable type
 + list.mem_assoc
  list.mem_assoc(key,l) returns true if l contains a pair (key,value)
  + _category
   List
  + (unlabeled)
   Key to look for
   + default
    None
   + type
    anything that is an orderable type
  + (unlabeled)
   List of pairs (key,value)
   + default
    None
   + type
    [('a*'b)] where 'a is an orderable type
  + _type
   ('a,[('a*'b)])->bool where 'a is an orderable type
 + list.nth
  Get the n-th element of a list (the first element is at position 0), or'default' if element does not exist.
  + _category
   List
  + _type
   (default:'a,['a],int)->'a
  + default
   Default value if key does not exist
   + default
    None
   + type
    'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    int
 + list.randomize
  Shuffle the content of a list.
  + _category
   List
  + _type
   (['a])->['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.remove
  Remove a value from a list.
  + _category
   List
  + _type
   ('a,['a])->['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.remove_assoc
  Remove the first pair from an associative list.
  + _category
   List
  + _type
   ('a,[('a*'c)])->[('a*'c)]
  + (unlabeled)
   Key of pair to be removed
   + default
    None
   + type
    'a
  + (unlabeled)
   List of pairs (key,value)
   + default
    None
   + type
    [('a*'c)]
 + list.rev
  Revert list order.
  + _category
   List
  + _type
   (['a])->['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.sort
  Sort a list according to a comparison function.
  + _category
   List
  + _type
   ((('a,'a)->int),['a])->['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ('a,'a)->int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + list.tl
  Return the list without its first element.
  + _category
   List
  + _type
   (['a])->['a]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ['a]
 + localtime
  Convert a time in seconds into a date in the local time zone and execute passed callback with the result. Fields meaning same as POSIX's @tm struct@. Warning: "year" is: year - 1900, i.e. 117 for 2017!
  + _category
   System
  + _type
   (float,
 ((sec:int,min:int,hour:int,mday:int,mon:int,year:int,
   wday:int,yday:int,isdst:bool)->'a))->'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    (sec:int,min:int,hour:int,mday:int,mon:int,year:int,
 wday:int,yday:int,isdst:bool)->'a
 + log
  Log a message.
  + _category
   Liquidsoap
  + _type
   (?label:string,?level:int,string)->unit
  + label
   (no doc)
   + default
    "lang"
   + type
    string
  + level
   (no doc)
   + default
    3
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + log_10
  Base 10 logarithm.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + log_clocks
  Create a log of clock times for all the clocks initially present. The log is in a simple format which you can directly use with gnuplot.
  + _category
   Liquidsoap
  + delay
   Delay before setting up the clock logger. This should be used to ensure that the logger starts only after the clocks are created.
   + default
    0.0
   + type
    float
  + interval
   Polling interval.
   + default
    1.0
   + type
    float
  + (unlabeled)
   Path of the log file.
   + default
    None
   + type
    string
  + _type
   (?delay:float,?interval:float,string)->unit
 + log_e
  Natural logarithm.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + map_metadata
  Rewrite metadata on the fly using a function.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?insert_missing:bool,?strip:bool,
 ?update:bool,(([(string*string)])->[(string*string)]),
 source('a))->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + insert_missing
   Treat track beginnings without metadata as having empty ones. The operational order is: create empty if needed, map and strip if enabled.
   + default
    true
   + type
    bool
  + strip
   Completely remove empty metadata. Operates on both empty values and empty metadata chunk.
   + default
    false
   + type
    bool
  + update
   Only update metadata. If false, only returned values will be set as metadata.
   + default
    true
   + type
    bool
  + (unlabeled)
   A function that returns new metadata.
   + default
    None
   + type
    ([(string*string)])->[(string*string)]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + max_int
  Maximal representable integer.
  + _category
   Math
  + _type
   ()->int
  + _flag
   hidden
 + mean
  Produce mono audio by taking the mean of all audio channels.
  + _category
   Source / Conversions
  + _type
   (?id:string,source(audio='#a,video='#b,midi='#c))->
source(audio=1,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + merge_tracks
  Merge consecutive tracks from the input source.
  + _category
   Source / Track Processing
  + _type
   (?id:string,source('a))->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + metadata.export
  Filter-out internal metadata.
  + _category
   Liquidsoap
  + _type
   ([(string*string)])->[(string*string)]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [(string*string)]
 + mic_filter
  Remove low frequencies often produced by microphones.
  + _category
   Source / Sound Processing
  + (unlabeled)
   The input source.
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
  + _type
   (source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
 + midi.chord
  Generate a chord.
  + _category
   Source / MIDI Processing
  + _type
   (?id:string,?metadata:string,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c+1)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + metadata
   Name of the metadata containing the chords.
   + default
    "chord"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + midi.merge_all
  Merge all MIDI tracks in one.
  + _category
   Source / MIDI Processing
  + _type
   (?id:string,?track_out:int,
 source(audio='#a,video='#b,midi='#c+1))->
source(audio='#a,video='#b,midi='#c+1)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + track_out
   Destination track.
   + default
    0
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c+1)
 + midi.remove
  Remove MIDI tracks.
  + _category
   Source / MIDI Processing
  + _type
   (?id:string,[int],source(audio='#a,video='#b,midi='#c+1))->
source(audio='#a,video='#b,midi='#c+1)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   Tracks to remove.
   + default
    None
   + type
    [int]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c+1)
 + midimeter
  Display midi events.
  + _category
   Source / Visualization
  + _type
   (?id:string,source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + _flag
   hidden
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + min_int
  Minimal representable integer.
  + _category
   Math
  + _type
   ()->int
  + _flag
   hidden
 + mix
  Mixing table controllable via the telnet interface.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,[source(audio='#a,video='#b,midi='#c)])->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [source(audio='#a,video='#b,midi='#c)]
 + mksafe
  Turn a source into an infaillible source by adding blank when the source is not available.
  + _category
   Source / Track Processing
  + id
   (no doc)
   + default
    "mksafe"
   + type
    string
  + (unlabeled)
   the source to turn infaillible
   + default
    None
   + type
    source('a)
  + _type
   (?id:string,source('a))->source('a)
 + mod
  Integer remainder. If y is not zero, x == (x / y) * y + x mod y, and abs(x mod y) <= abs(y)-1.
  + _category
   Math
  + _type
   (int,int)->int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    int
 + mutexify
  Protect functions with a mutex to avoid concurrent calls, return original value otherwise.
  + _category
   Liquidsoap
  + _type
   ('a)->'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'a
 + mux_audio
  Mux an audio stream into an audio-free stream.
  + _category
   Source / Conversions
  + _type
   (?id:string,audio:source(audio='#a,video=0,midi=0),
 source(audio=0,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + audio
   (no doc)
   + default
    None
   + type
    source(audio='#a,video=0,midi=0)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio=0,video='#b,midi='#c)
 + mux_mono
  Mux a mono audio stream into another stream.
  + _category
   Source / Conversions
  + _type
   (?id:string,mono:source(audio=1,video=0,midi=0),
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a+1,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + mono
   (no doc)
   + default
    None
   + type
    source(audio=1,video=0,midi=0)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + mux_stereo
  Mux a stereo audio stream into another stream.
  + _category
   Source / Conversions
  + _type
   (?id:string,stereo:source(audio=2,video=0,midi=0),
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a+2,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + stereo
   (no doc)
   + default
    None
   + type
    source(audio=2,video=0,midi=0)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + mux_video
  Add video channnels to a stream.
  + _category
   Source / Conversions
  + _type
   (?id:string,video:source(audio=0,video='#a,midi=0),
 source(audio='#b,video=0,midi='#c))->
source(audio='#b,video='#a,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + video
   (no doc)
   + default
    None
   + type
    source(audio=0,video='#a,midi=0)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video=0,midi='#c)
 + noise
  Generate (audio and/or video) white noise.
  + _category
   Source / Input
  + _type
   (?id:string,?duration:float)->
source(audio='a,video='b,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   (no doc)
   + default
    0.0
   + type
    float
 + normalize
  Normalize the signal. Dynamic normalization of the signal is sometimes the only option, and can make a listening experience much nicer. However, its dynamic aspect implies some limitations which can go as far as creating saturation in some extreme cases. If possible, consider using some track-based normalization techniques such as those based on replay gain. See the documentation for more details.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?gain_max:'a,?gain_min:'b,?k_down:'c,
 ?k_up:'d,?target:'e,?threshold:'f,?window:float,
 source(audio='#g,video='#h,midi='#i))->
source(audio='#g,video='#h,midi='#i)
where 'a, 'b, 'c, 'd, 'e, 'f is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + gain_max
   Maximal gain value (dB).
   + default
    6.0
   + type
    anything that is either float or ()->float
  + gain_min
   Minimal gain value (dB).
   + default
    -6.0
   + type
    anything that is either float or ()->float
  + k_down
   Coefficient when the power must go down (between 0 and 1, slowest to fastest).
   + default
    0.1
   + type
    anything that is either float or ()->float
  + k_up
   Coefficient when the power must go up (between 0 and 1, slowest to fastest).
   + default
    0.005
   + type
    anything that is either float or ()->float
  + target
   Desired RMS (dB).
   + default
    -13.0
   + type
    anything that is either float or ()->float
  + threshold
   Minimal RMS for activaing gain control (dB).
   + default
    -40.0
   + type
    anything that is either float or ()->float
  + window
   Duration of the window used to compute the current RMS power (second).
   + default
    0.1
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#g,video='#h,midi='#i)
 + not
  Returns the negation of its argument.
  + _category
   Bool
  + _type
   (bool)->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    bool
 + notify_metadata
  Use notify to display metadata info.
  + _category
   Source / Track Processing
  + urgency
   Urgency (low|normal|critical).
   + default
    "low"
   + type
    string
  + icon
   Icon filename or stock icon to display.
   + default
    "stock_smiley-22"
   + type
    string
  + time
   Timeout in milliseconds.
   + default
    3000
   + type
    int
  + display
   Function used to display a metadata packet.
   + default
    <fun>
   + type
    ([(string*string)])->string
  + title
   Title of the notification message.
   + default
    "Liquidsoap: new track"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + _type
   (?urgency:string,?icon:string,?time:int,
 ?display:(([(string*string)])->string),?title:string,
 source('a))->source('a)
 + nrj
  Compress and normalize, producing a more uniform and "full" sound.
  + _category
   Source / Sound Processing
  + (unlabeled)
   The input source.
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
  + _type
   (source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
 + of_json
  Parse a json string into a liquidsoap value.
  + _category
   String
  + _type
   (default:'a,string)->'a
  + default
   Default value if string cannot be parsed.
   + default
    None
   + type
    'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + on_blank
  Calls a given handler when detecting a blank.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?max_blank:float,?min_noise:float,
 ?on_noise:(()->unit),?start_blank:bool,?threshold:float,
 ?track_sensitive:bool,(()->unit),
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + max_blank
   Maximum duration of silence allowed, in seconds.
   + default
    20.0
   + type
    float
  + min_noise
   Minimum duration of noise required to end silence, in seconds.
   + default
    0.0
   + type
    float
  + on_noise
   Handler called when noise is detected.
   + default
    {()}
   + type
    ()->unit
  + start_blank
   Start assuming we have blank.
   + default
    false
   + type
    bool
  + threshold
   Power in decibels under which the stream is considered silent.
   + default
    -40.0
   + type
    float
  + track_sensitive
   Reset blank counter at each track.
   + default
    true
   + type
    bool
  + (unlabeled)
   Handler called when blank is detected.
   + default
    None
   + type
    ()->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + on_end
  Call a given handler when there is less than a given amount of time remaining before then end of track.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?delay:float,
 ((float,[(string*string)])->unit),source('a))->
source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + delay
   Execute handler when remaining time is less or equal to this value.
   + default
    5.0
   + type
    float
  + (unlabeled)
   Function to execute. First argument is the remaining time, second is the latest metadata. That function should be fast because it is executed in the main streaming thread.
   + default
    None
   + type
    (float,[(string*string)])->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + on_metadata
  Call a given handler on metadata packets.
  + _category
   Source / Track Processing
  + _type
   (?id:string,(([(string*string)])->unit),source('a))->
source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   Function called on every metadata packet in the stream. It should be fast because it is executed in the main streaming thread.
   + default
    None
   + type
    ([(string*string)])->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + on_offset
  Call a given handler when position in track is equal or more than a given amount of time.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?force:bool,?offset:float,?override:string,
 ((float,[(string*string)])->unit),source('a))->
source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + force
   Force execution of callback if track ends before 'offset' position has been reached.
   + default
    false
   + type
    bool
  + offset
   Execute handler when position in track is equal or more than to this value.
   + default
    -1.0
   + type
    float
  + override
   Metadata field which, if present and containing a float, overrides the 'offset' parameter.
   + default
    "liq_on_offset"
   + type
    string
  + (unlabeled)
   Function to execute. First argument is the actual position within the current track, second is the latest metadata. That function should be fast because it is executed in the main streaming thread.
   + default
    None
   + type
    (float,[(string*string)])->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + on_shutdown
  Register a function to be called when Liquidsoap shuts down.
  + _category
   System
  + _type
   ((()->unit))->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ()->unit
 + on_start
  Register a function to be called when Liquidsoap starts.
  + _category
   System
  + _type
   ((()->unit))->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ()->unit
 + on_track
  Call a given handler on new tracks.
  + _category
   Source / Track Processing
  + _type
   (?id:string,(([(string*string)])->unit),source('a))->
source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   Function called on every beginning of track in the stream, with the corresponding metadata as argument. If there is no metadata at the beginning of track, the empty list is passed. That function should be fast because it is executed in the main streaming thread.
   + default
    None
   + type
    ([(string*string)])->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + once
  Creates a source that plays only one track of the input source.
  + _category
   Source / Track Processing
  + (unlabeled)
   The input source.
   + default
    None
   + type
    source('a)
  + _type
   (source('a))->source('a)
 + or
  Return the disjunction of its arguments
  + _category
   Bool
  + _type
   (bool,bool)->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    bool
 + os.type
  Type of OS running liquidsoap.
  + _category
   System
  + _type
   string
 + osd_metadata
  Use X On Screen Display to display metadata info.
  + _category
   Source / Track Processing
  + color
   Color of the text.
   + default
    "green"
   + type
    string
  + position
   Position of the text (top|middle|bottom).
   + default
    "top"
   + type
    string
  + font
   Font used (xfontsel is your friend...)
   + default
    "-*-courier-*-r-*-*-*-240-*-*-*-*-*-*"
   + type
    string
  + display
   Function used to display a metadata packet.
   + default
    <fun>
   + type
    ([(string*string)])->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + _type
   (?color:string,?position:string,?font:string,
 ?display:(([(string*string)])->string),source('a))->
source('a)
 + out
  Output a stream using the 'output.prefered' operator. The input source does not need to be infallible, blank will just be played during failures.
  + _category
   Source / Output
  + (unlabeled)
   the source to output
   + default
    None
   + type
    source('a)
  + _type
   (source('a))->active_source('a)
 + output.dummy
  Dummy output for debugging purposes.
  + _category
   Source / Output
  + _type
   (?id:string,?fallible:bool,?on_start:(()->unit),
 ?on_stop:(()->unit),?start:bool,source('a))->
active_source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + start
   Automatically start outputting whenever possible. If true, an infallible (normal) output will start outputting as soon as it is created, and a fallible output will (re)start as soon as its source becomes available for streaming.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + output.external
  Send the stream to a process' standard input.
  + _category
   Source / Output
  + _type
   (?id:string,?fallible:bool,?flush:bool,
 ?on_start:(()->unit),?on_stop:(()->unit),
 ?reopen_delay:float,?reopen_on_metadata:bool,
 ?reopen_when:(()->bool),?start:bool,format('a),string,
 source('a))->active_source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + flush
   Perform a flush after each write.
   + default
    false
   + type
    bool
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + reopen_delay
   Prevent re-opening within that delay, in seconds.
   + default
    120.0
   + type
    float
  + reopen_on_metadata
   Re-open on every new metadata information.
   + default
    false
   + type
    bool
  + reopen_when
   When should the output be re-opened.
   + default
    {false}
   + type
    ()->bool
  + start
   Automatically start outputting whenever possible. If true, an infallible (normal) output will start outputting as soon as it is created, and a fallible output will (re)start as soon as its source becomes available for streaming.
   + default
    true
   + type
    bool
  + (unlabeled)
   Encoding format.
   + default
    None
   + type
    format('a)
  + (unlabeled)
   Process to pipe data to. Some strftime conversion specifiers are available: <code>%SMHdmY</code>. You can also use <code>$(..)</code> interpolation notation for metadata.
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + output.file
  Output the source stream to a file.
  + _category
   Source / Output
  + _type
   (?id:string,?append:bool,?dir_perm:int,?fallible:bool,
 ?flush:bool,?on_close:((string)->unit),
 ?on_start:(()->unit),?on_stop:(()->unit),?perm:int,
 ?reopen_delay:float,?reopen_on_metadata:bool,
 ?reopen_when:(()->bool),?start:bool,format('a),string,
 source('a))->active_source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + append
   Do not truncate but append in the file if it exists.
   + default
    false
   + type
    bool
  + dir_perm
   Permission of the directories if some have to be created, up to umask. Although you can enter values in octal notation (0oXXX) they will be displayed in decimal (for instance, 0o777 = 7*8^2 + 7*8 + 7 = 511).
   + default
    511
   + type
    int
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + flush
   Perform a flush after each write.
   + default
    false
   + type
    bool
  + on_close
   This function will be called for each file, after that it is finished and closed. The filename will be passed as argument.
   + default
    fun (_) -> ()
   + type
    (string)->unit
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + perm
   Permission of the file if it has to be created, up to umask. You can and should write this number in octal notation: 0oXXX. The default value is however displayed in decimal (0o666 = 6*8^2 + 6*8 + 6 = 438).
   + default
    438
   + type
    int
  + reopen_delay
   Prevent re-opening within that delay, in seconds.
   + default
    120.0
   + type
    float
  + reopen_on_metadata
   Re-open on every new metadata information.
   + default
    false
   + type
    bool
  + reopen_when
   When should the output be re-opened.
   + default
    {false}
   + type
    ()->bool
  + start
   Automatically start outputting whenever possible. If true, an infallible (normal) output will start outputting as soon as it is created, and a fallible output will (re)start as soon as its source becomes available for streaming.
   + default
    true
   + type
    bool
  + (unlabeled)
   Encoding format.
   + default
    None
   + type
    format('a)
  + (unlabeled)
   Filename where to output the stream. Some strftime conversion specifiers are available: <code>%SMHdmY</code>. You can also use <code>$(..)</code> interpolation notation for metadata.
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + output.harbor
  Encode and output the stream using the harbor server.
  + _category
   Source / Output
  + _type
   (?id:string,?auth:((string,string)->bool),?buffer:int,
 ?burst:int,?chunk:int,?dumpfile:string,?encoding:string,
 ?fallible:bool,?format:string,
 ?headers:[(string*string)],?metaint:int,mount:string,
 ?on_connect:((headers:[(string*string)],uri:string,
               protocol:string,string)->unit),
 ?on_disconnect:((string)->unit),?on_start:(()->unit),
 ?on_stop:(()->unit),?password:string,?port:int,
 ?start:bool,?timeout:float,?url:string,?user:string,
 format('a),source('a))->active_source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + auth
   Authentication function. <code>f(login,password)</code> returns <code>true</code> if the user should be granted access for this login. Override any other method if used.
   + default
    fun (_,_) -> false
   + type
    (string,string)->bool
  + buffer
   Maximun buffer per-client.
   + default
    327675
   + type
    int
  + burst
   Initial burst of data sent to the client.
   + default
    65534
   + type
    int
  + chunk
   Send data to clients using chunks of at least this length.
   + default
    1024
   + type
    int
  + dumpfile
   Dump stream to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + encoding
   Encoding used to send metadata. If empty, defaults to "ISO-8859-1" for non-ogg formats and "UTF-8" otherwise.
   + default
    ""
   + type
    string
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + format
   Format, e.g. "audio/ogg". When empty, the encoder is used to guess.
   + default
    ""
   + type
    string
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + metaint
   Interval used to send ICY metadata
   + default
    16000
   + type
    int
  + mount
   (no doc)
   + default
    None
   + type
    string
  + on_connect
   Callback executed when connection is established.
   + default
    fun (~headers,~uri,~protocol,_) -> ()
   + type
    (headers:[(string*string)],uri:string,protocol:string,
 string)->unit
  + on_disconnect
   Callback executed when connection stops.
   + default
    fun (_) -> ()
   + type
    (string)->unit
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + password
   (no doc)
   + default
    "hackme"
   + type
    string
  + port
   (no doc)
   + default
    8000
   + type
    int
  + start
   Automatically start outputting whenever possible. If true, an infallible (normal) output will start outputting as soon as it is created, and a fallible output will (re)start as soon as its source becomes available for streaming.
   + default
    true
   + type
    bool
  + timeout
   Timeout for network operations.
   + default
    30.0
   + type
    float
  + url
   (no doc)
   + default
    ""
   + type
    string
  + user
   User for client connection, disabled if empty.
   + default
    ""
   + type
    string
  + (unlabeled)
   Encoding format.
   + default
    None
   + type
    format('a)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + output.harbor.ssl
  Encode and output the stream using the SSL harbor server.
  + _category
   Source / Output
  + _type
   (?id:string,?auth:((string,string)->bool),?buffer:int,
 ?burst:int,?chunk:int,?dumpfile:string,?encoding:string,
 ?fallible:bool,?format:string,
 ?headers:[(string*string)],?metaint:int,mount:string,
 ?on_connect:((headers:[(string*string)],uri:string,
               protocol:string,string)->unit),
 ?on_disconnect:((string)->unit),?on_start:(()->unit),
 ?on_stop:(()->unit),?password:string,?port:int,
 ?start:bool,?timeout:float,?url:string,?user:string,
 format('a),source('a))->active_source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + auth
   Authentication function. <code>f(login,password)</code> returns <code>true</code> if the user should be granted access for this login. Override any other method if used.
   + default
    fun (_,_) -> false
   + type
    (string,string)->bool
  + buffer
   Maximun buffer per-client.
   + default
    327675
   + type
    int
  + burst
   Initial burst of data sent to the client.
   + default
    65534
   + type
    int
  + chunk
   Send data to clients using chunks of at least this length.
   + default
    1024
   + type
    int
  + dumpfile
   Dump stream to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + encoding
   Encoding used to send metadata. If empty, defaults to "ISO-8859-1" for non-ogg formats and "UTF-8" otherwise.
   + default
    ""
   + type
    string
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + format
   Format, e.g. "audio/ogg". When empty, the encoder is used to guess.
   + default
    ""
   + type
    string
  + headers
   Additional headers.
   + default
    []
   + type
    [(string*string)]
  + metaint
   Interval used to send ICY metadata
   + default
    16000
   + type
    int
  + mount
   (no doc)
   + default
    None
   + type
    string
  + on_connect
   Callback executed when connection is established.
   + default
    fun (~headers,~uri,~protocol,_) -> ()
   + type
    (headers:[(string*string)],uri:string,protocol:string,
 string)->unit
  + on_disconnect
   Callback executed when connection stops.
   + default
    fun (_) -> ()
   + type
    (string)->unit
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + password
   (no doc)
   + default
    "hackme"
   + type
    string
  + port
   (no doc)
   + default
    8000
   + type
    int
  + start
   Automatically start outputting whenever possible. If true, an infallible (normal) output will start outputting as soon as it is created, and a fallible output will (re)start as soon as its source becomes available for streaming.
   + default
    true
   + type
    bool
  + timeout
   Timeout for network operations.
   + default
    30.0
   + type
    float
  + url
   (no doc)
   + default
    ""
   + type
    string
  + user
   User for client connection, disabled if empty.
   + default
    ""
   + type
    string
  + (unlabeled)
   Encoding format.
   + default
    None
   + type
    format('a)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + output.icecast
  Encode and output the stream to an icecast2 or shoutcast server.
  + _category
   Source / Output
  + _type
   (?id:string,?chunked:bool,?connection_timeout:float,
 ?description:string,?dumpfile:string,?encoding:string,
 ?fallible:bool,?format:string,?genre:string,
 ?headers:[(string*string)],?host:string,?icy_id:int,
 ?icy_metadata:string,?mount:string,?name:string,
 ?on_connect:(()->unit),?on_disconnect:(()->unit),
 ?on_error:((string)->float),?on_start:(()->unit),
 ?on_stop:(()->unit),?password:string,?port:int,
 ?protocol:string,?public:bool,?start:bool,
 ?timeout:float,?url:string,?user:string,?verb:string,
 format('a),source('a))->active_source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + chunked
   Used cunked transfer with the 'http(s)' protocol.
   + default
    false
   + type
    bool
  + connection_timeout
   Timeout for establishing network connections (disabled is negative).
   + default
    5.0
   + type
    float
  + description
   (no doc)
   + default
    ""
   + type
    string
  + dumpfile
   Dump stream to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + encoding
   Encoding used to send metadata. If empty, defaults to "UTF-8" for "http(s)" protocol and "ISO-8859-1" for "icy" protocol.
   + default
    ""
   + type
    string
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + format
   Format, e.g. "audio/ogg". When empty, the encoder is used to guess.
   + default
    ""
   + type
    string
  + genre
   (no doc)
   + default
    ""
   + type
    string
  + headers
   Additional headers.
   + default
    [("User-Agent","Liquidsoap/1.3.7 (Unix; OCaml 4.07.0)")]
   + type
    [(string*string)]
  + host
   (no doc)
   + default
    "localhost"
   + type
    string
  + icy_id
   Shoutcast source ID. Only supported by Shoutcast v2.
   + default
    1
   + type
    int
  + icy_metadata
   Send new metadata using the ICY protocol. One of: "guess", "true", "false"
   + default
    "guess"
   + type
    string
  + mount
   Source mount point. Mandatory when streaming to icecast.
   + default
    "Use [name]"
   + type
    string
  + name
   (no doc)
   + default
    "Use [mount]"
   + type
    string
  + on_connect
   Callback executed when connection is established.
   + default
    {()}
   + type
    ()->unit
  + on_disconnect
   Callback executed when connection stops.
   + default
    {()}
   + type
    ()->unit
  + on_error
   Callback executed when an error happens. The callback receives a string representation of the error that occured and returns a float. If returned value is positive, connection will be tried again after this amount of time (in seconds).
   + default
    fun (_) -> 3.
   + type
    (string)->float
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + password
   (no doc)
   + default
    "hackme"
   + type
    string
  + port
   (no doc)
   + default
    8000
   + type
    int
  + protocol
   Protocol of the streaming server: 'http' or 'https' for Icecast, 'icy' for shoutcast.
   + default
    "http"
   + type
    string
  + public
   (no doc)
   + default
    true
   + type
    bool
  + start
   Automatically start outputting whenever possible. If true, an infallible (normal) output will start outputting as soon as it is created, and a fallible output will (re)start as soon as its source becomes available for streaming.
   + default
    true
   + type
    bool
  + timeout
   Timeout for network read and write.
   + default
    30.0
   + type
    float
  + url
   (no doc)
   + default
    ""
   + type
    string
  + user
   User for shout source connection. Defaults to "source" for icecast connections. Useful only in special cases, like with per-mountpoint users.
   + default
    ""
   + type
    string
  + verb
   Verb to use with the 'http(s)' protocol. One of: 'source', 'put' or 'post'.
   + default
    "source"
   + type
    string
  + (unlabeled)
   Encoding format.
   + default
    None
   + type
    format('a)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + output.prefered
  Output to local audio card using the first available driver in pulseaudio, portaudio, oss, alsa, ao, dummy.
  + _category
   Source / Output
  + id
   (no doc)
   + default
    ""
   + type
    string
  + fallible
   (no doc)
   + default
    false
   + type
    bool
  + on_start
   (no doc)
   + default
    {()}
   + type
    ()->unit
  + on_stop
   (no doc)
   + default
    {()}
   + type
    ()->unit
  + start
   (no doc)
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + _type
   (?id:string,?fallible:bool,?on_start:(()->unit),
 ?on_stop:(()->unit),?start:bool,source('a))->
active_source('a)
 + output.shoutcast
  Output to shoutcast.
  + _category
   Source / Output
  + id
   Output's ID
   + default
    "output.shoutcast"
   + type
    string
  + start
   Start output threads on operator initialization.
   + default
    true
   + type
    bool
  + host
   (no doc)
   + default
    "localhost"
   + type
    string
  + port
   (no doc)
   + default
    8000
   + type
    int
  + user
   User for shout source connection. Useful only in special cases, like with per-mountpoint users.
   + default
    ""
   + type
    string
  + password
   (no doc)
   + default
    "hackme"
   + type
    string
  + genre
   (no doc)
   + default
    ""
   + type
    string
  + url
   (no doc)
   + default
    ""
   + type
    string
  + name
   (no doc)
   + default
    ""
   + type
    string
  + encoding
   Encoding used to send metadata.
   + default
    "ISO-8859-1"
   + type
    string
  + public
   (no doc)
   + default
    true
   + type
    bool
  + icy_id
   Shoutcast source ID. Only supported by Shoutcast v2.
   + default
    1
   + type
    int
  + format
   Format, e.g. "audio/ogg". When empty, the encoder is used to guess.
   + default
    ""
   + type
    string
  + dj
   Callback to set dj name.
   + default
    {""}
   + type
    ()->string
  + dumpfile
   Dump stream to file, for debugging purpose. Disabled if empty.
   + default
    ""
   + type
    string
  + icy_metadata
   Send new metadata using the ICY protocol. One of: "guess", "true", "false"
   + default
    "guess"
   + type
    string
  + on_connect
   Callback executed when connection starts.
   + default
    {()}
   + type
    ()->unit
  + on_disconnect
   Callback executed when connection stops.
   + default
    {()}
   + type
    ()->unit
  + aim
   (no doc)
   + default
    ""
   + type
    string
  + icq
   (no doc)
   + default
    ""
   + type
    string
  + irc
   (no doc)
   + default
    ""
   + type
    string
  + icy_reset
   Reset shoutcast source buffer upon connecting (necessary for NSV).
   + default
    true
   + type
    bool
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + on_error
   Callback executed when an error happens. If returned value is positive, connection wll be tried again after this amount of time (in seconds).
   + default
    fun (_) -> 3.
   + type
    (string)->float
  + (unlabeled)
   Encoding format. For shoutcast, should be mp3 or AAC(+).
   + default
    None
   + type
    format('a)
  + (unlabeled)
   The source to output
   + default
    None
   + type
    source('a)
  + _type
   (?id:string,?start:bool,?host:string,?port:int,
 ?user:string,?password:string,?genre:string,?url:string,
 ?name:string,?encoding:string,?public:bool,?icy_id:int,
 ?format:string,?dj:(()->string),?dumpfile:string,
 ?icy_metadata:string,?on_connect:(()->unit),
 ?on_disconnect:(()->unit),?aim:string,?icq:string,
 ?irc:string,?icy_reset:bool,?fallible:bool,
 ?on_start:(()->unit),?on_stop:(()->unit),
 ?on_error:((string)->float),format('a),source('a))->
active_source('a)
 + output.udp
  Output encoded data to UDP, without any control whatsoever.
  + _category
   Source / Output
  + _type
   (?id:string,?fallible:bool,host:string,
 ?on_start:(()->unit),?on_stop:(()->unit),port:int,
 ?start:bool,format('a),source('a))->active_source('a)
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + fallible
   Allow the child source to fail, in which case the output will be (temporarily) stopped.
   + default
    false
   + type
    bool
  + host
   (no doc)
   + default
    None
   + type
    string
  + on_start
   Callback executed when outputting starts.
   + default
    {()}
   + type
    ()->unit
  + on_stop
   Callback executed when outputting stops.
   + default
    {()}
   + type
    ()->unit
  + port
   (no doc)
   + default
    None
   + type
    int
  + start
   Automatically start outputting whenever possible. If true, an infallible (normal) output will start outputting as soon as it is created, and a fallible output will (re)start as soon as its source becomes available for streaming.
   + default
    true
   + type
    bool
  + (unlabeled)
   Encoding format.
   + default
    None
   + type
    format('a)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + overlap_sources
  Rotate between overlapping sources. Next track starts according to 'liq_start_next' offset metadata.
  + _category
   Source / Track Processing
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + normalize
   (no doc)
   + default
    false
   + type
    bool
  + start_next
   Metadata field indicating when the next track should start, relative to current track's time.
   + default
    "liq_start_next"
   + type
    string
  + weights
   Relative weight of the sources in the sum. The empty list stands for the homogeneous distribution.
   + default
    []
   + type
    [int]
  + (unlabeled)
   Sources to toggle from
   + default
    None
   + type
    [source(audio='#a,video='#b,midi=0)]
  + _type
   (?id:string,?normalize:bool,?start_next:string,
 ?weights:[int],[source(audio='#a,video='#b,midi=0)])->
source(audio='#a,video='#b,midi=0)
 + path.concat
  Concatenate two paths, using the appropriate directory separator.
  + _category
   System
  + _type
   (string,string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + peak
  Get current peak volume of the source. Returns a pair @(f,s)@ where s is a new source and @f@ is a function of type @() -> float@ and returns the current peak volume of the source.
  + _category
   Source / Visualization
  + _type
   (?id:string,?duration:'a,
 source(audio='#b,video='#c,midi='#d))->
((()->float)*source(audio='#b,video='#c,midi='#d))
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the window (in seconds). A value <= 0, means that computation should not be performed.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c,midi='#d)
 + peak.stereo
  Get current peak volume of the source. Returns a pair @(f,s)@ where s is a new source and @f@ is a function of type @() -> float@ and returns the current peak volume of the source.
  + _category
   Source / Visualization
  + _type
   (?id:string,?duration:'a,
 source(audio='#b+2,video='#c,midi='#d))->
((()->(float*float))*
 source(audio='#b+2,video='#c,midi='#d))
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the window (in seconds). A value <= 0, means that computation should not be performed.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b+2,video='#c,midi='#d)
 + pipe
  Process audio signal through a given process stdin/stdout.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?buffer:float,?max:float,process:string,
 ?restart:bool,?restart_on_error:bool,
 source(audio='#a+1,video=0,midi=0))->
source(audio='#b+1,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + buffer
   Duration of the pre-buffered data.
   + default
    1.0
   + type
    float
  + max
   Maximum duration of the buffered data.
   + default
    10.0
   + type
    float
  + process
   Process used to pipe data to.
   + default
    None
   + type
    string
  + restart
   Restart process when exited.
   + default
    true
   + type
    bool
  + restart_on_error
   Restart process when exited with error.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video=0,midi=0)
 + pitch
  Compute the pitch of a sound.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?freq_max:float,?freq_min:float,
 ?length:float,source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + _flag
   hidden
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + freq_max
   Maximal frequency
   + default
    10000.0
   + type
    float
  + freq_min
   Minimal frequency
   + default
    40.0
   + type
    float
  + length
   Length in seconds of the analysis window
   + default
    0.1
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + playlist
  Loop on a playlist of URIs.
  + _category
   Source / Input
  + _type
   (?id:string,?check_next:((request('a))->bool),
 ?conservative:bool,?default_duration:float,
 ?length:float,?mime_type:string,?mode:string,
 ?on_track:((last:bool,int)->bool),?prefix:string,
 ?reload:int,?reload_mode:string,?timeout:float,string)->
source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + check_next
   Function used to filter next tracks. A candidate track is only validated if the function returns true on it. The function is called before resolution, hence metadata will only be available for requests corresponding to local files. This is typically used to avoid repetitions, but be careful: if the function rejects all attempts, the playlist will enter into a consuming loop and stop playing anything.
   + default
    <fun>
   + type
    (request('a))->bool
  + conservative
   If true, estimated remaining time on the current track is not considered when computing queue length.
   + default
    false
   + type
    bool
  + default_duration
   When unknown, assume this duration (in sec.) for files.
   + default
    30.0
   + type
    float
  + length
   How much audio (in sec.) should be queued in advance.
   + default
    10.0
   + type
    float
  + mime_type
   Default MIME type for the playlist. Empty string means automatic detection.
   + default
    ""
   + type
    string
  + mode
   Play the files in the playlist either in the order ("normal" mode), or shuffle the playlist each time it is loaded, and play it in this order for a whole round ("randomize" mode), or pick a random file in the playlist each time ("random" mode).
   + default
    "randomize"
   + type
    string
  + on_track
   Function to execute when playlist is about to play its next track. Receives track position in the playlist and wether this is the last track. Force a reload by returning @true@ in this function. 
   + default
    fun (_,~last) -> false
   + type
    (last:bool,int)->bool
  + prefix
   Add a constant prefix to all requests. Useful for passing extra information using annotate, or for resolution through a particular protocol, such as replaygain.
   + default
    ""
   + type
    string
  + reload
   Amount of time (in seconds or rounds), when applicable, before which the playlist is reloaded; 0 means never.
   + default
    0
   + type
    int
  + reload_mode
   Unit of the reload parameter, either 'rounds', 'seconds' or 'watch' (reload the file whenever it is changed).
   + default
    "seconds"
   + type
    string
  + timeout
   Timeout (in sec.) for a single download.
   + default
    20.0
   + type
    float
  + (unlabeled)
   URI where to find the playlist.
   + default
    None
   + type
    string
 + playlist.merge
  Play the whole playlist as one track.
  + _category
   Source / Track Processing
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + random
   Randomize playlist content
   + default
    false
   + type
    bool
  + (unlabeled)
   Playlist URI.
   + default
    None
   + type
    string
  + _type
   (?id:string,?random:bool,string)->source('a)
 + playlist.once
  Custom playlist source written using the script language. It will read directory or playlist, play all files and stop.
  + _category
   Source / Input
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + random
   Randomize playlist content
   + default
    false
   + type
    bool
  + on_done
   Function to execute when the playlist is finished
   + default
    {()}
   + type
    ()->unit
  + reload_mode
   If set to "watch", will be reloaded when the playlist is changed
   + default
    ""
   + type
    string
  + (unlabeled)
   Playlist URI
   + default
    None
   + type
    string
  + _type
   (?id:string,?random:bool,?on_done:(()->unit),
 ?reload_mode:string,string)->source('a)
 + playlist.parse
  Try to parse a local playlist. Return a list of (metadata,URI) items, where metadata is a list of (key,value) bindings.
  + _category
   Liquidsoap
  + _type
   (string)->[([(string*string)]*string)]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + playlist.reloadable
  Custom playlist source written using the script language.  Will read directory or playlist, play all files and stop.  Returns a pair @(reload,source)@ where @reload@ is a function of type @(?uri:string)->unit@ used to reload the source and @source@ is the actual source. The reload function can optionally be called with a new playlist URI. Otherwise, it reloads the previous URI.
  + _category
   Source / Input
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + random
   Randomize playlist content
   + default
    false
   + type
    bool
  + on_done
   Function to execute when the playlist is finished
   + default
    {()}
   + type
    ()->unit
  + filter
   Filter out some files depending on metadata
   + default
    fun (_) -> true
   + type
    ([(string*string)])->bool
  + (unlabeled)
   Playlist URI
   + default
    None
   + type
    string
  + _type
   (?id:string,?random:bool,?on_done:(()->unit),
 ?filter:(([(string*string)])->bool),string)->
(((?uri:string)->unit)*source('a))
 + playlist.safe
  Loop on a playlist of local files, and never fail. In order to do so, it has to check every file at the loading, so the streamer startup may take a few seconds. To avoid this, use a standard playlist, and put only a few local files in a default safe_playlist in order to ensure the liveness of the streamer.
  + _category
   Source / Input
  + _type
   (?id:string,?mime_type:string,?mode:string,
 ?on_track:((last:bool,int)->bool),?prefix:string,
 ?reload:int,?reload_mode:string,string)->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + mime_type
   Default MIME type for the playlist. Empty string means automatic detection.
   + default
    ""
   + type
    string
  + mode
   Play the files in the playlist either in the order ("normal" mode), or shuffle the playlist each time it is loaded, and play it in this order for a whole round ("randomize" mode), or pick a random file in the playlist each time ("random" mode).
   + default
    "randomize"
   + type
    string
  + on_track
   Function to execute when playlist is about to play its next track. Receives track position in the playlist and wether this is the last track. Force a reload by returning @true@ in this function. 
   + default
    fun (_,~last) -> false
   + type
    (last:bool,int)->bool
  + prefix
   Add a constant prefix to all requests. Useful for passing extra information using annotate, or for resolution through a particular protocol, such as replaygain.
   + default
    ""
   + type
    string
  + reload
   Amount of time (in seconds or rounds), when applicable, before which the playlist is reloaded; 0 means never.
   + default
    0
   + type
    int
  + reload_mode
   Unit of the reload parameter, either 'rounds', 'seconds' or 'watch' (reload the file whenever it is changed).
   + default
    "seconds"
   + type
    string
  + (unlabeled)
   URI where to find the playlist.
   + default
    None
   + type
    string
 + polly_protocol
  Register the polly: protocol using AWS Polly speech synthesis services. Syntax: polly:<text>
  + _flag
   hidden
  + rlog
   (no doc)
   + default
    None
   + type
    'a
  + maxtime
   (no doc)
   + default
    None
   + type
    'b
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (rlog:'a,maxtime:'b,string)->[string]
 + pow
  Exponentiation of numbers.
  + _category
   Math
  + _type
   ('a,'a)->'a where 'a is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
 + prepend
  Prepend an extra track before every track. Set the metadata 'liq_prepend' to 'false' to inhibit prepending on one track.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?merge:bool,
 source(audio='#a,video='#b,midi='#c),
 (([(string*string)])->
  source(audio='#a,video='#b,midi='#c)))->
source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + merge
   Merge the track with its appended track.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
  + (unlabeled)
   Given the metadata, build the source producing the track to prepend. This source is allowed to fail (produce nothing) if no relevant track is to be appended. However, success must be immediate or it will not be taken into account.
   + default
    None
   + type
    ([(string*string)])->source(audio='#a,video='#b,midi='#c)
 + print
  Print on standard output.
  + _category
   Interaction
  + _type
   (?newline:bool,'a)->unit
  + newline
   If true, a newline is added after displaying the value.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'a
 + process_protocol
  Register the process protocol. Syntax: process:<output ext>,<cmd>:uri where <cmd> is interpolated with: [("input",<input file>),("output",<output file>),("colon",":")] See say: protocol for an example.
  + _flag
   hidden
  + rlog
   (no doc)
   + default
    None
   + type
    (string)->'a
  + maxtime
   (no doc)
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (rlog:((string)->'a),maxtime:float,string)->[string]
 + process_uri
  Create a process: uri, replacing @:@ with @$(colon)@
  + _category
   Liquidsoap
  + extname
   Output file extension (with no leading '.')
   + default
    None
   + type
    'a
  + uri
   Input uri
   + default
    ""
   + type
    string
  + (unlabeled)
   Command line to execute
   + default
    None
   + type
    string
  + _type
   (extname:'a,?uri:string,string)->string
 + quote
  Escape shell metacharacters.
  + _category
   String
  + _type
   (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + random
  At the beginning of every track, select a random ready child.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?replay_metadata:bool,?track_sensitive:'a,
 ?transitions:[(source('b),source('b))->source('b)],
 ?weights:[int],[source('b)])->source('b)
where 'a is either bool or ()->bool
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + replay_metadata
   Replay the last metadata of a child when switching to it in the middle of a track.
   + default
    true
   + type
    bool
  + track_sensitive
   Re-select only on end of tracks.
   + default
    true
   + type
    anything that is either bool or ()->bool
  + transitions
   Transition functions, padded with <code>fun (x,y) -> y</code> functions.
   + default
    []
   + type
    [(source('b),source('b))->source('b)]
  + weights
   Weights of the children (padded with 1), defining for each child the probability that it is selected.
   + default
    []
   + type
    [int]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [source('b)]
 + random.bool
  Generate a random value.
  + _category
   Bool
  + _type
   ()->bool
 + random.float
  Generate a random value.
  + _category
   Math
  + _type
   (?min:float,?max:float)->float
  + min
   (no doc)
   + default
    -1000000.0
   + type
    float
  + max
   (no doc)
   + default
    1000000.0
   + type
    float
 + random.int
  Generate a random value.
  + _category
   Math
  + _type
   (?min:float,?max:float)->int
  + min
   (no doc)
   + default
    -4611686018427387904
   + type
    float
  + max
   (no doc)
   + default
    4611686018427387903
   + type
    float
 + read
  Read some value from standard input (console).
  + _category
   System
  + hide
   Hide typed characters (for passwords).
   + default
    false
   + type
    bool
  + _type
   (?hide:bool)->string
 + register
  Register a new setting.
  + _category
   Liquidsoap
  + _type
   (name:string,?descr:string,?on_change:(('a)->unit),
 string,'a)->unit
where 'a is unit, bool, int, float, string or [string]
  + name
   Settings name
   + default
    None
   + type
    string
  + descr
   Settings description
   + default
    ""
   + type
    string
  + on_change
   Callback executed when the setting is changed.
   + default
    fun (_) -> ()
   + type
    ('a)->unit
where 'a is unit, bool, int, float, string or [string]
  + (unlabeled)
   Setting key
   + default
    None
   + type
    string
  + (unlabeled)
   Setting initial value
   + default
    None
   + type
    anything that is unit, bool, int, float, string or [string]
 + register_flow
  Register a radio on Liquidsoap Flows.
  + _category
   Liquidsoap
  + server
   (no doc)
   + default
    ""
   + type
    string
  + user
   (no doc)
   + default
    "default"
   + type
    string
  + password
   (no doc)
   + default
    "default"
   + type
    string
  + email
   (no doc)
   + default
    ""
   + type
    string
  + radio
   Name of the radio.
   + default
    None
   + type
    string
  + website
   URL of the website of the radio.
   + default
    None
   + type
    string
  + description
   Description of the radio.
   + default
    None
   + type
    string
  + genre
   Genre of the radio (rock or rap or etc.).
   + default
    None
   + type
    string
  + streams
   List of streams for the radio described by a pair of strings consisting of the format of the stream and the url of the stream. The format should be of the form "ogg/128k" consisting of the codec and the bitrate, separated by "/".
   + default
    None
   + type
    [(string*string)]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + _type
   (?server:string,?user:string,?password:string,
 ?email:string,radio:string,website:string,
 description:string,genre:string,
 streams:[(string*string)],source('a))->source('a)
 + reopen.stderr
  Reopen standard error on the given file
  + _category
   System
  + _type
   (string)->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + reopen.stdin
  Reopen standard input on the given file
  + _category
   System
  + _type
   (string)->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + reopen.stdout
  Reopen standard output on the given file
  + _category
   System
  + _type
   (string)->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + replaygain_protocol
  Register the replaygain protocol.
  + _flag
   hidden
  + rlog
   (no doc)
   + default
    None
   + type
    'a
  + maxtime
   (no doc)
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (rlog:'a,maxtime:float,string)->[string]
 + request.create
  Create a request. Creation may fail if there is no available RID, which cannot be detected currently: in that case one will obtain a request that will fail to be resolved.
  + _category
   Liquidsoap
  + _type
   (?indicators:[string],?persistent:bool,string)->
request('a)
  + indicators
   (no doc)
   + default
    []
   + type
    [string]
  + persistent
   (no doc)
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + request.create.raw
  Create a raw request, i.e. for files that should not be decoded for streaming. Creation may fail if there is no available RID, which cannot be detected currently: in that case one will obtain a request that will fail to be resolved.
  + _category
   Liquidsoap
  + _type
   (?indicators:[string],?persistent:bool,string)->
request(audio=0,video=0,midi=0)
  + indicators
   (no doc)
   + default
    []
   + type
    [string]
  + persistent
   (no doc)
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + request.destroy
  Destroying a request causes any temporary associated file to be deleted, and releases its RID. Persistent requests resist to destroying, unless forced.
  + _category
   Liquidsoap
  + _type
   (?force:bool,request('a))->unit
  + force
   Destroy the request even if it is persistent.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    request('a)
 + request.dynamic
  Play request dynamically created by a given function.
  + _category
   Source / Input
  + _type
   (?id:string,?conservative:bool,?default_duration:float,
 ?length:float,?timeout:float,(()->request('a)))->
source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + conservative
   If true, estimated remaining time on the current track is not considered when computing queue length.
   + default
    false
   + type
    bool
  + default_duration
   When unknown, assume this duration (in sec.) for files.
   + default
    30.0
   + type
    float
  + length
   How much audio (in sec.) should be queued in advance.
   + default
    10.0
   + type
    float
  + timeout
   Timeout (in sec.) for a single download.
   + default
    20.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ()->request('a)
 + request.equeue
  Receive URIs from users, and play them. Insertion and deletion possible at any position.
  + _category
   Source / Input
  + _type
   (?id:string,?conservative:bool,?default_duration:float,
 ?length:float,?timeout:float)->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + conservative
   If true, estimated remaining time on the current track is not considered when computing queue length.
   + default
    false
   + type
    bool
  + default_duration
   When unknown, assume this duration (in sec.) for files.
   + default
    30.0
   + type
    float
  + length
   How much audio (in sec.) should be queued in advance.
   + default
    10.0
   + type
    float
  + timeout
   Timeout (in sec.) for a single download.
   + default
    20.0
   + type
    float
 + request.filename
  Return a valid local filename if the request is ready, and the empty string otherwise.
  + _category
   Liquidsoap
  + _type
   (request('a))->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    request('a)
 + request.log
  Get log data associated to a request.
  + _category
   Liquidsoap
  + _type
   (request('a))->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    request('a)
 + request.metadata
  Get the metadata associated to a request.
  + _category
   Liquidsoap
  + _type
   (request('a))->[(string*string)]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    request('a)
 + request.queue
  Receive URIs from users, and play them.
  + _category
   Source / Input
  + _type
   (?id:string,?conservative:bool,?default_duration:float,
 ?interactive:bool,?length:float,?queue:[request('a)],
 ?timeout:float)->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + conservative
   If true, estimated remaining time on the current track is not considered when computing queue length.
   + default
    false
   + type
    bool
  + default_duration
   When unknown, assume this duration (in sec.) for files.
   + default
    30.0
   + type
    float
  + interactive
   Should the queue be controllable via telnet?
   + default
    true
   + type
    bool
  + length
   How much audio (in sec.) should be queued in advance.
   + default
    10.0
   + type
    float
  + queue
   Initial queue of requests.
   + default
    []
   + type
    [request('a)]
  + timeout
   Timeout (in sec.) for a single download.
   + default
    20.0
   + type
    float
 + request.ready
  Check if a request is ready, i.e. is associated to a valid local file. Unless the initial URI was such a file, a request has to be resolved before being ready.
  + _category
   Liquidsoap
  + _type
   (request('a))->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    request('a)
 + request.resolve
  Resolve a request, i.e. attempt to get a valid local file. The operation can take some time. Return true if the resolving was successful, false otherwise (timeout or invalid URI).
  + _category
   Liquidsoap
  + _type
   (?timeout:float,request('a))->bool
  + timeout
   Limit in seconds to the duration of the resolving.
   + default
    30.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    request('a)
 + restart
  Restart the application.
  + _category
   System
  + _type
   ()->unit
 + rewrite_metadata
  No documentation available.
  + _flag
   hidden
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [(string*string)]
  + insert_missing
   (no doc)
   + default
    true
   + type
    bool
  + update
   (no doc)
   + default
    true
   + type
    bool
  + strip
   (no doc)
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + _type
   ([(string*string)],?insert_missing:bool,?update:bool,
 ?strip:bool,source('a))->source('a)
 + rms
  Get current RMS volume of the source. Returns a pair @(f,s)@ where s is a new source and @f@ is a function of type @() -> float@ and returns the current RMS volume of the source.
  + _category
   Source / Visualization
  + _type
   (?id:string,?duration:'a,
 source(audio='#b,video='#c,midi='#d))->
((()->float)*source(audio='#b,video='#c,midi='#d))
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the window (in seconds). A value <= 0, means that computation should not be performed.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c,midi='#d)
 + rms.stereo
  Get current RMS volume of the source. Returns a pair @(f,s)@ where s is a new source and @f@ is a function of type @() -> float@ and returns the current RMS volume of the source.
  + _category
   Source / Visualization
  + _type
   (?id:string,?duration:'a,
 source(audio='#b+2,video='#c,midi='#d))->
((()->(float*float))*
 source(audio='#b+2,video='#c,midi='#d))
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the window (in seconds). A value <= 0, means that computation should not be performed.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b+2,video='#c,midi='#d)
 + rotate
  Rotate between the sources.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?replay_metadata:bool,?track_sensitive:'a,
 ?transitions:[(source('b),source('b))->source('b)],
 ?weights:[int],[source('b)])->source('b)
where 'a is either bool or ()->bool
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + replay_metadata
   Replay the last metadata of a child when switching to it in the middle of a track.
   + default
    true
   + type
    bool
  + track_sensitive
   Re-select only on end of tracks.
   + default
    true
   + type
    anything that is either bool or ()->bool
  + transitions
   Transition functions, padded with <code>fun (x,y) -> y</code> functions.
   + default
    []
   + type
    [(source('b),source('b))->source('b)]
  + weights
   Weights of the children (padded with 1), defining for each child how many tracks are played from it per round, if that many are actually available.
   + default
    []
   + type
    [int]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [source('b)]
 + rotate.merge
  Same operator as rotate but merges tracks from each sources.
For instance, <code>rotate.merge([intro,main,outro])</code> creates a source that plays a sequence <code>[intro,main,outro]</code> as single track and loops back.
  + _category
   Source / Track Processing
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + track_sensitive
   Re-select only on end of tracks.
   + default
    true
   + type
    bool
  + transitions
   Transition functions, padded with <code>fun (x,y) -> y</code> functions.
   + default
    []
   + type
    [(source('a),source('a))->source('a)]
  + weights
   Weights of the children (padded with 1), defining for each child how many tracks are played from it per round, if that many are actually available.
   + default
    []
   + type
    [int]
  + (unlabeled)
   Sequence of sources to be merged
   + default
    None
   + type
    [source('a)]
  + _type
   (?id:string,?track_sensitive:bool,
 ?transitions:[(source('a),source('a))->source('a)],
 ?weights:[int],[source('a)])->source('a)
 + run_process
  Run a process in a shell environment. Returns: @((stdout,stderr),status)@ where status is one of: @("exit","<code>")@, @("killed","<signal number>")@, @("stopped","<signal number>")@, @("exception","<exception description>")@, @("timeout","<run time>")@.
  + _category
   System
  + _type
   (?env:[(string*string)],?inherit_env:bool,?timeout:float,
 string)->((string*string)*(string*string))
  + env
   Process environment
   + default
    []
   + type
    [(string*string)]
  + inherit_env
   Inherit calling process's environment when @env@ parameter is empty.
   + default
    true
   + type
    bool
  + timeout
   Cancel process after @timeout@ has elapsed. Ignored if negative.
   + default
    -1.0
   + type
    float
  + (unlabeled)
   Command to run
   + default
    None
   + type
    string
 + s3_protocol
  Register the s3:// protocol 
  + _flag
   hidden
  + rlog
   (no doc)
   + default
    None
   + type
    'a
  + maxtime
   (no doc)
   + default
    None
   + type
    'b
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (rlog:'a,maxtime:'b,string)->[string]
 + saw
  Generate a saw wave.
  + _category
   Source / Input
  + _type
   (?id:string,?amplitude:float,?duration:float,?float)->
source(audio='#a+1,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + amplitude
   Maximal value of the waveform.
   + default
    1.0
   + type
    float
  + duration
   Duration in seconds (0. means infinite).
   + default
    0.0
   + type
    float
  + (unlabeled)
   Frequency of the saw.
   + default
    440.0
   + type
    float
 + say_metadata
  Append speech-synthesized tracks reading the metadata.
  + _category
   Source / Track Processing
  + (unlabeled)
   The source to use
   + default
    None
   + type
    source(?A)
  + pattern
   Pattern to use
   + default
    "say:$(if $(artist),\"It was $(artist)$(if $(title),\\\", $(title)\\\").\")"
   + type
    string
  + _type
   (source(?A),?pattern:string)->source(?A)
 + say_protocol
  Register the legacy say: protocol using text2wav and sox
  + _flag
   hidden
  + rlog
   (no doc)
   + default
    None
   + type
    'a
  + maxtime
   (no doc)
   + default
    None
   + type
    'b
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'c
  + _type
   (rlog:'a,maxtime:'b,'c)->[string]
 + sequence
  Play only one track of every successive source, except for the last one which is played as much as available. Sources are released after being used, allowing them to shutdown cleanly and free their resources.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?merge:bool,[source('a)])->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + merge
   Merge tracks when advancing from one source to the next one. This will NOT merge consecutive tracks from the last source; see merge_tracks() if you need that too.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [source('a)]
 + server.broadcast
  Restart all server clients waiting on the given condition
  + _category
   Interaction
  + (unlabeled)
   condition
   + default
    None
   + type
    ('a*('b*(()->'c)))
  + _type
   (('a*('b*(()->'c))))->'c
 + server.condition
  Create a pair of functions @(wait,(signal,broadcast))@ used to suspend and resume server command execution. Used to write interactive server commands through @server.wait@, @server.signal@, @server.broadcast@ and @server.write@.
  + _category
   Interaction
  + _type
   ()->((((()->string))->string)*((()->unit)*(()->unit)))
 + server.execute
  Execute a liquidsoap server command.
  + _category
   Liquidsoap
  + _type
   (string,?string)->[string]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    ""
   + type
    string
 + server.insert_metadata
  Register a server/telnet command to update a source's metadata. Returns a new source, which will receive the updated metadata. The command has the following format: insert key1="val1",key2="val2",...
  + _category
   Source / Track Processing
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + _type
   (?id:string,source('a))->source('a)
 + server.read
  Read a string from the client up-to a marker. Marker can be any string of regular expression. Should be used via the syntactic sugar: @server.read <marker> : <varname> then <after> end@
  + _category
   Interaction
  + _type
   (((string)->string),string)->string
  + (unlabeled)
   function to run after write
   + default
    None
   + type
    (string)->string
  + (unlabeled)
   Read marker
   + default
    None
   + type
    string
 + server.readchars
  Read a string of fixed length from the client up-to a marker. Should be used via the syntactic sugar: @server.readchars <len> : <varname> then <after> end@
  + _category
   Interaction
  + _type
   (((string)->string),int)->string
  + (unlabeled)
   function to run after write
   + default
    None
   + type
    (string)->string
  + (unlabeled)
   Number of characters to read
   + default
    None
   + type
    int
 + server.readline
  Read a line from the client. Should be used via the syntactic sugar: @server.readline <varname> then <after> end@
  + _category
   Interaction
  + _type
   (((string)->string))->string
  + (unlabeled)
   function to run after write
   + default
    None
   + type
    (string)->string
 + server.register
  Register a command. You can then execute this function through the server, either telnet or socket.
  + _category
   Interaction
  + _type
   (?namespace:string,?description:string,?usage:string,
 string,((string)->string))->unit
  + namespace
   (no doc)
   + default
    ""
   + type
    string
  + description
   A description of your command.
   + default
    "No documentation available."
   + type
    string
  + usage
   (no doc)
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    (string)->string
 + server.rms
  Register a command that outputs the RMS of the returned source.
  + _category
   Source / Visualization
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
  + _type
   (?id:string,source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
 + server.signal
  Restart one server client waiting on the given condition
  + _category
   Interaction
  + (unlabeled)
   condition
   + default
    None
   + type
    ('a*((()->'b)*'c))
  + _type
   (('a*((()->'b)*'c)))->'b
 + server.wait
  Wait on a server condition. Used to write interactive server command. Should be used via the syntactic sugar: @server.wait <condition> then <after> end@
  + _category
   Interaction
  + _type
   (((((()->string))->string)*'a),(()->string))->string
  + (unlabeled)
   condition
   + default
    None
   + type
    ((((()->string))->string)*'a)
  + (unlabeled)
   code to execute when resuming
   + default
    None
   + type
    ()->string
 + server.write
  Execute a partial write while executing a server command. Should be used via the syntactic sugar: @server.write <string> then <after> end@
  + _category
   Interaction
  + _type
   ((()->string),string)->string
  + (unlabeled)
   function to run after write
   + default
    None
   + type
    ()->string
  + (unlabeled)
   string to write
   + default
    None
   + type
    string
 + set
  Change some setting. Use <code>liquidsoap --conf-descr</code> and <code>liquidsoap --conf-descr-key KEY</code> on the command-line to get some information about available settings.
  + _category
   Liquidsoap
  + _type
   (string,'a)->unit
where 'a is unit, bool, int, float, string or [string]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is unit, bool, int, float, string or [string]
 + setenv
  Set the value associated to a variable in the process environment.
  + _category
   System
  + _type
   (string,string)->unit
  + (unlabeled)
   Variable to be set.
   + default
    None
   + type
    string
  + (unlabeled)
   Value to set.
   + default
    None
   + type
    string
 + shutdown
  Shutdown the application.
  + _category
   System
  + _type
   ()->unit
 + sin
  Sine. Argument is in radians.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + sine
  Generate a sine wave.
  + _category
   Source / Input
  + _type
   (?id:string,?amplitude:float,?duration:float,?float)->
source(audio='#a+1,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + amplitude
   Maximal value of the waveform.
   + default
    1.0
   + type
    float
  + duration
   Duration in seconds (0. means infinite).
   + default
    0.0
   + type
    float
  + (unlabeled)
   Frequency of the sine.
   + default
    440.0
   + type
    float
 + single
  Loop on a request. It never fails if the request is static, meaning that it can be fetched once. Typically, http, ftp, say requests are static, and time is not.
  + _category
   Source / Input
  + _type
   (?id:string,?conservative:bool,?default_duration:float,
 ?length:float,?timeout:float,string)->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + conservative
   If true, estimated remaining time on the current track is not considered when computing queue length.
   + default
    false
   + type
    bool
  + default_duration
   When unknown, assume this duration (in sec.) for files.
   + default
    30.0
   + type
    float
  + length
   How much audio (in sec.) should be queued in advance.
   + default
    10.0
   + type
    float
  + timeout
   Timeout (in sec.) for a single download.
   + default
    20.0
   + type
    float
  + (unlabeled)
   URI where to find the file
   + default
    None
   + type
    string
 + sinh
  Hyperbolic sine. Argument is in radians.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + skip_blank
  Skip track when detecting a blank.
  + _category
   Source / Track Processing
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + threshold
   Power in decibels under which the stream is considered silent.
   + default
    -40.0
   + type
    float
  + max_blank
   Maximum silence length allowed, in seconds.
   + default
    20.0
   + type
    float
  + min_noise
   Minimum duration of noise required to end silence, in seconds.
   + default
    0.0
   + type
    float
  + track_sensitive
   Reset blank counter at each track.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
  + _type
   (?id:string,?threshold:float,?max_blank:float,
 ?min_noise:float,?track_sensitive:bool,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
 + sky
  Multiband-compression.
  + _category
   Source / Sound Processing
  + (unlabeled)
   The input source.
   + default
    None
   + type
    source(audio='#a,video='#b,midi=0)
  + _type
   (source(audio='#a,video='#b,midi=0))->
source(audio='#a,video='#b,midi=0)
 + sleeper
  Sleep at each frame. Useful for emulating network delays, etc.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?delay:float,?freeze:float,?random:float,
 source(audio='#a,video='#b,midi='#c))->
source(audio='#a,video='#b,midi='#c)
  + _flag
   hidden
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + delay
   Amount of time to sleep at each frame, the unit being the frame length.
   + default
    1.0
   + type
    float
  + freeze
   Freeze after given amount of time (don't freeze if negative).
   + default
    -1.0
   + type
    float
  + random
   Maximal random amount of time added (unit is frame length).
   + default
    0.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + smart_cross
  Cross operator, allowing the composition of the N last seconds of a track with the beginning of the next track, using a transition function depending on the relative power of the signal before and after the end of track.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?active:bool,?conservative:bool,
 ?duration:float,?minimum:float,?width:float,
 ((float,float,[(string*string)],[(string*string)],
   source(audio='#a+1,video=0,midi=0),
   source(audio='#a+1,video=0,midi=0))->
  source(audio='#a+1,video=0,midi=0)),
 source(audio='#a+1,video=0,midi=0))->
source(audio='#a+1,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + active
   The active behavior is to keep ticking the child's clock when the operator is not streaming. Otherwise the child's clock is strictly based on what is streamed off the child source, which results in time-dependent active sources to be frozen when that source is stopped.
   + default
    false
   + type
    bool
  + conservative
   Do not trust remaining time estimations, always buffering data in advance. This avoids being tricked by skips, either manual or caused by skip_blank().
   + default
    true
   + type
    bool
  + duration
   Duration in seconds of the crossed end of track.
   + default
    5.0
   + type
    float
  + minimum
   Minimum duration (in sec.) for a cross: If the track ends without any warning (e.g. in case of skip) there may not be enough data for a decent composition. Set to 0. to avoid having transitions after skips, or more to avoid transitions on short tracks. With the negative default, transitions always occur.
   + default
    -1.0
   + type
    float
  + width
   Width of the power computation window.
   + default
    1.0
   + type
    float
  + (unlabeled)
   Transition function, composing from the end of a track and the next track. It also takes the power of the signal before and after the transition, and the metadata.
   + default
    None
   + type
    (float,float,[(string*string)],[(string*string)],
 source(audio='#a+1,video=0,midi=0),
 source(audio='#a+1,video=0,midi=0))->
source(audio='#a+1,video=0,midi=0)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video=0,midi=0)
 + smart_crossfade
  Crossfade between tracks, taking the respective volume levels into account in the choice of the transition.
  + _category
   Source / Track Processing
  + start_next
   Crossing duration, if any.
   + default
    5.0
   + type
    float
  + fade_in
   Fade-in duration, if any.
   + default
    3.0
   + type
    float
  + fade_out
   Fade-out duration, if any.
   + default
    3.0
   + type
    float
  + default
   Transition used when no rule applies (default: sequence).
   + default
    <fun>
   + type
    (source(audio='#a+1,video=0,midi=0),
 source(audio='#a+1,video=0,midi=0))->
source(audio='#a+1,video=0,midi=0)
  + high
   Value, in dB, for loud sound level.
   + default
    -15.0
   + type
    float
  + medium
   Value, in dB, for medium sound level.
   + default
    -32.0
   + type
    float
  + margin
   Margin to detect sources that have too different sound level for crossing.
   + default
    4.0
   + type
    float
  + width
   Width of the volume analysis window.
   + default
    2.0
   + type
    float
  + conservative
   Always prepare for a premature end-of-track.
   + default
    true
   + type
    bool
  + (unlabeled)
   The input source.
   + default
    None
   + type
    source(audio='#a+1,video=0,midi=0)
  + _type
   (?start_next:float,?fade_in:float,?fade_out:float,
 ?default:((source(audio='#a+1,video=0,midi=0),
            source(audio='#a+1,video=0,midi=0))->
           source(audio='#a+1,video=0,midi=0)),
 ?high:float,?medium:float,?margin:float,?width:float,
 ?conservative:bool,source(audio='#a+1,video=0,midi=0))->
source(audio='#a+1,video=0,midi=0)
 + smooth_add
  Mixes two streams, with faded transitions between the state when only the normal stream is available and when the special stream gets added on top of it.
  + _category
   Source / Track Processing
  + delay
   Delay before starting the special source.
   + default
    0.5
   + type
    float
  + p
   Portion of amplitude of the normal source in the mix.
   + default
    0.2
   + type
    float
  + normal
   The normal source, which could be called the carrier too.
   + default
    None
   + type
    source(audio='#a,video='#b,midi=0)
  + special
   The special source.
   + default
    None
   + type
    source(audio='#a,video='#b,midi=0)
  + _type
   (?delay:float,?p:float,
 normal:source(audio='#a,video='#b,midi=0),
 special:source(audio='#a,video='#b,midi=0))->
source(audio='#a,video='#b,midi=0)
 + snd
  Get the second component of a pair.
  + _category
   Pair
  + _type
   (('a*'b))->'b
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ('a*'b)
 + source.dynamic
  Dynamically change the underlying source.
  + _category
   Source / Track Processing
  + _type
   (?id:string,(()->[source('a)]))->source('a)
  + _flag
   experimental
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ()->[source('a)]
 + source.fallible
  Indicate if a source may fail, i.e. may not be ready to stream.
  + _category
   Liquidsoap
  + _type
   (source('a))->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + source.id
  Get one source's identifier.
  + _category
   Liquidsoap
  + _type
   (source('a))->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + source.init
  Simultaneously initialize sources, return the sublist of sources that failed to initialized.
  + _category
   Liquidsoap
  + _type
   ([source(audio=*,video=*,midi=*)])->
[source(audio=*,video=*,midi=*)]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [source(audio=*,video=*,midi=*)]
 + source.is_ready
  Indicate if a source is ready to stream, or currently streaming.
  + _category
   Liquidsoap
  + _type
   (source('a))->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + source.is_up
  Check whether a source is up.
  + _category
   System
  + _type
   (source('a))->bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + source.on_shutdown
  Register a function to be called when source shuts down.
  + _category
   System
  + _type
   (source('a),(()->unit))->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    ()->unit
 + source.remaining
  Estimation of remaining time in the current track.
  + _category
   Liquidsoap
  + _type
   (source('a))->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + source.seek
  Seek forward, in seconds. Returns the amount of time effectively seeked.
  + _category
   Liquidsoap
  + _type
   (source('a),float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + source.shutdown
  Desactivate a source.
  + _category
   Liquidsoap
  + _type
   (source('a))->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + source.skip
  Skip to the next track.
  + _category
   Liquidsoap
  + _type
   (source('a))->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + sqrt
  Square root.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + square
  Generate a square wave.
  + _category
   Source / Input
  + _type
   (?id:string,?amplitude:float,?duration:float,?float)->
source(audio='#a+1,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + amplitude
   Maximal value of the waveform.
   + default
    1.0
   + type
    float
  + duration
   Duration in seconds (0. means infinite).
   + default
    0.0
   + type
    float
  + (unlabeled)
   Frequency of the square.
   + default
    440.0
   + type
    float
 + stereo.left
  Extract the left channel of a stereo source
  + _category
   Source / Conversions
  + (unlabeled)
   Source to extract from
   + default
    None
   + type
    source(audio=2,video=0,midi=0)
  + _type
   (source(audio=2,video=0,midi=0))->
source(audio=1,video=0,midi=0)
 + stereo.ms.decode
  Decode mid+side stereo (M/S) to left+right stereo.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?width:float,source(audio=2,video=0,midi=0))->
source(audio=2,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + width
   Width of the stereo field.
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio=2,video=0,midi=0)
 + stereo.ms.encode
  Encode left+right stereo to mid+side stereo (M/S).
  + _category
   Source / Sound Processing
  + _type
   (?id:string,source(audio=2,video=0,midi=0))->
source(audio=2,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio=2,video=0,midi=0)
 + stereo.pan
  Pan a stereo sound.
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?field:'a,?pan:'b,
 source(audio=2,video=0,midi=0))->
source(audio=2,video=0,midi=0)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + field
   Field width in degrees (between 0 and 90).
   + default
    90.0
   + type
    anything that is either float or ()->float
  + pan
   Pan ranges between -1 and 1.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio=2,video=0,midi=0)
 + stereo.right
  Extract the right channel of a stereo source
  + _category
   Source / Conversions
  + (unlabeled)
   Source to extract from
   + default
    None
   + type
    source(audio=2,video=0,midi=0)
  + _type
   (source(audio=2,video=0,midi=0))->
source(audio=1,video=0,midi=0)
 + store_metadata
  Keep track of the last N metadata packets in the stream, and make the history available via a server command.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?size:int,source('a))->source('a)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + size
   Size of the history
   + default
    10
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source('a)
 + stretch
  Slow down or accelerate an audio stream by stretching (sounds lower) or squeezing it (sounds higher).
  + _category
   Source / Sound Processing
  + _type
   (?id:string,?active:bool,ratio:'a,
 source(audio='#b+1,video=0,midi=0))->
source(audio='#c+1,video=0,midi=0)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + active
   The active behavior is to keep ticking the child's clock when the operator is not streaming. Otherwise the child's clock is strictly based on what is streamed off the child source, which results in time-dependent active sources to be frozen when that source is stopped.
   + default
    true
   + type
    bool
  + ratio
   A value higher than 1 means slowing down.
   + default
    None
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b+1,video=0,midi=0)
 + string.capitalize
  Return a string with the first character set to upper case (capitalize), or to lower case (uncapitalize).
  + _category
   String
  + _type
   (?capitalize:bool,?space_sensitive:bool,string)->string
  + capitalize
   Capitalize if true, uncapitalize otherwise
   + default
    true
   + type
    bool
  + space_sensitive
   Capitalize each space separated sub-string.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.case
  Convert a string to lower or upper case.
  + _category
   String
  + _type
   (?lower:bool,string)->string
  + lower
   Convert to lower case if true and uppercase otherwise.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.concat
  Concatenate strings.
  + _category
   String
  + _type
   (?separator:string,[string])->string
  + separator
   (no doc)
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [string]
 + string.escape
  Escape special charaters in a string. String is parsed char by char. See @string.utf8.escape@ for an UTF8-aware parsing function.
  + _category
   String
  + _type
   (?special_chars:[string],?escape_char:((string)->string),
 string)->string
  + special_chars
   List of characters that should be escaped. The first character of each element in the list is considered.
   + default
    ["\127", "\\", "\"", "\000", "\001", "\002", "\003", "\004", "\005", "\006", "\007", "\b", "\t", "\n", "\011", "\012", "\r", "\014", "\015", "\016", "\017", "\018", "\019", "\020", "\021", "\022", "\023", "\024", "\025", "\026", "\027", "\028", "\029", "\030", "\031"]
   + type
    [string]
  + escape_char
   Function used to escape a character.
   + default
    <fun>
   + type
    (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.extract
  Extract substrings from a string. 
Perl compatible regular expressions are recognized. Hence, special characters should be escaped. 
Returns a list of (index,value).
If the list does not have a pair associated to some index, it means that the corresponding pattern was not found.
  + _category
   String
  + _type
   (pattern:string,string)->[(string*string)]
  + pattern
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.length
  Get the length of a string.
  + _category
   String
  + _type
   (string)->int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.match
  Match a string with an expression. 
Perl compatible regular expressions are recognized. Hence, special characters should be escaped.
  + _category
   String
  + _type
   (pattern:string,string)->bool
  + pattern
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.recode
  Convert a string. Effective only if Camomile is enabled.
  + _category
   String
  + _type
   (?in_enc:string,?out_enc:string,string)->string
  + in_enc
   Input encoding. Autodetected if empty.
   + default
    ""
   + type
    string
  + out_enc
   Output encoding.
   + default
    "UTF-8"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.replace
  Replace substrings in a string. 
Will replace all substrings matched in the pattern by the string returned by the replace function.
  + _category
   String
  + _type
   (pattern:string,((string)->string),string)->string
  + pattern
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.split
  Split a string at 'separator'. 
Perl compatible regular expressions are recognized. Hence, special characters should be escaped.
  + _category
   String
  + _type
   (separator:string,string)->[string]
  + separator
   (no doc)
   + default
    None
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.sub
  Get a substring of a string. Returns "" if no such substring exists.
  + _category
   String
  + _type
   (string,start:int,length:int)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + start
   Return a sub string starting at this position. First position is 0.
   + default
    None
   + type
    int
  + length
   Return a sub string of @length@ characters.
   + default
    None
   + type
    int
 + string.trim
  Return a string without leading and trailing whitespace.
  + _category
   String
  + _type
   (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string.utf8.escape
  Escape special charaters in an UTF8 string.
  + _category
   String
  + _type
   (?special_chars:[string],?escape_char:((string)->string),
 string)->string
  + special_chars
   List of characters that should be escaped. The first character of each element in the list is considered.
   + default
    ["\127", "\\", "\"", "\000", "\001", "\002", "\003", "\004", "\005", "\006", "\007", "\b", "\t", "\n", "\011", "\012", "\r", "\014", "\015", "\016", "\017", "\018", "\019", "\020", "\021", "\022", "\023", "\024", "\025", "\026", "\027", "\028", "\029", "\030", "\031"]
   + type
    [string]
  + escape_char
   Function used to escape a character.
   + default
    <fun>
   + type
    (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + string_of
  Return the representation of a value.
  + _category
   String
  + _type
   ('a)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'a
 + string_of_metadata
  Standard function for displaying metadata.
Shows artist and title, using "Unknown" when a field is empty.
  + _category
   String
  + (unlabeled)
   Metadata packet to be displayed.
   + default
    None
   + type
    [(string*string)]
  + _type
   ([(string*string)])->string
 + strip_blank
  Make the source unavailable when it is streaming blank.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?max_blank:float,?min_noise:float,
 ?start_blank:bool,?threshold:float,
 ?track_sensitive:bool,
 source(audio='#a,video='#b,midi='#c))->
active_source(audio='#a,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + max_blank
   Maximum duration of silence allowed, in seconds.
   + default
    20.0
   + type
    float
  + min_noise
   Minimum duration of noise required to end silence, in seconds.
   + default
    0.0
   + type
    float
  + start_blank
   Start assuming we have blank.
   + default
    false
   + type
    bool
  + threshold
   Power in decibels under which the stream is considered silent.
   + default
    -40.0
   + type
    float
  + track_sensitive
   Reset blank counter at each track.
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b,midi='#c)
 + swap
  Swap two channels of a stereo source.
  + _category
   Source / Conversions
  + _type
   (?id:string,source(audio=2,video=0,midi=0))->
source(audio=2,video=0,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio=2,video=0,midi=0)
 + switch
  At the beginning of a track, select the first source whose predicate is true.
  + _category
   Source / Track Processing
  + _type
   (?id:string,?replay_metadata:bool,?single:[bool],
 ?track_sensitive:'a,
 ?transitions:[(source('b),source('b))->source('b)],
 [((()->bool)*source('b))])->source('b)
where 'a is either bool or ()->bool
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + replay_metadata
   Replay the last metadata of a child when switching to it in the middle of a track.
   + default
    true
   + type
    bool
  + single
   Forbid the selection of a branch for two tracks in a row. The empty list stands for <code>[false,...,false]</code>.
   + default
    []
   + type
    [bool]
  + track_sensitive
   Re-select only on end of tracks.
   + default
    true
   + type
    anything that is either bool or ()->bool
  + transitions
   Transition functions, padded with <code>fun (x,y) -> y</code> functions.
   + default
    []
   + type
    [(source('b),source('b))->source('b)]
  + (unlabeled)
   Sources with the predicate telling when they can be played.
   + default
    None
   + type
    [((()->bool)*source('b))]
 + synth.all.saw
  Saw synthesizer. It creates one synthesizer for each channel.
  + _category
   Source / Sound Synthesis
  + _type
   (?id:string,?attack:float,?decay:float,?envelope:bool,
 ?release:float,?sustain:float,
 source(audio='#a+1,video='#b,midi='#c+16))->
source(audio='#a+1,video='#b,midi='#c+16)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + attack
   Envelope attack (in seconds).
   + default
    0.02
   + type
    float
  + decay
   Envelope decay (in seconds).
   + default
    0.01
   + type
    float
  + envelope
   Use envelope.
   + default
    true
   + type
    bool
  + release
   Envelope release (in seconds).
   + default
    0.01
   + type
    float
  + sustain
   Envelope sustain level.
   + default
    0.9
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video='#b,midi='#c+16)
 + synth.all.sine
  Sine synthesizer. It creates one synthesizer for each channel.
  + _category
   Source / Sound Synthesis
  + _type
   (?id:string,?attack:float,?decay:float,?envelope:bool,
 ?release:float,?sustain:float,
 source(audio='#a+1,video='#b,midi='#c+16))->
source(audio='#a+1,video='#b,midi='#c+16)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + attack
   Envelope attack (in seconds).
   + default
    0.02
   + type
    float
  + decay
   Envelope decay (in seconds).
   + default
    0.01
   + type
    float
  + envelope
   Use envelope.
   + default
    true
   + type
    bool
  + release
   Envelope release (in seconds).
   + default
    0.01
   + type
    float
  + sustain
   Envelope sustain level.
   + default
    0.9
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video='#b,midi='#c+16)
 + synth.all.square
  Square synthesizer. It creates one synthesizer for each channel.
  + _category
   Source / Sound Synthesis
  + _type
   (?id:string,?attack:float,?decay:float,?envelope:bool,
 ?release:float,?sustain:float,
 source(audio='#a+1,video='#b,midi='#c+16))->
source(audio='#a+1,video='#b,midi='#c+16)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + attack
   Envelope attack (in seconds).
   + default
    0.02
   + type
    float
  + decay
   Envelope decay (in seconds).
   + default
    0.01
   + type
    float
  + envelope
   Use envelope.
   + default
    true
   + type
    bool
  + release
   Envelope release (in seconds).
   + default
    0.01
   + type
    float
  + sustain
   Envelope sustain level.
   + default
    0.9
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video='#b,midi='#c+16)
 + synth.saw
  Saw synthesizer.
  + _category
   Source / Sound Synthesis
  + _type
   (?id:string,?attack:float,?channel:int,?decay:float,
 ?envelope:bool,?release:float,?sustain:float,
 ?volume:float,source(audio='#a+1,video='#b,midi='#c+1))->
source(audio='#a+1,video='#b,midi='#c+1)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + attack
   Envelope attack (in seconds).
   + default
    0.02
   + type
    float
  + channel
   MIDI channel to handle.
   + default
    0
   + type
    int
  + decay
   Envelope decay (in seconds).
   + default
    0.01
   + type
    float
  + envelope
   Use envelope.
   + default
    true
   + type
    bool
  + release
   Envelope release (in seconds).
   + default
    0.05
   + type
    float
  + sustain
   Envelope sustain level.
   + default
    0.9
   + type
    float
  + volume
   Initial volume.
   + default
    0.3
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video='#b,midi='#c+1)
 + synth.sine
  Sine synthesizer.
  + _category
   Source / Sound Synthesis
  + _type
   (?id:string,?attack:float,?channel:int,?decay:float,
 ?envelope:bool,?release:float,?sustain:float,
 ?volume:float,source(audio='#a+1,video='#b,midi='#c+1))->
source(audio='#a+1,video='#b,midi='#c+1)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + attack
   Envelope attack (in seconds).
   + default
    0.02
   + type
    float
  + channel
   MIDI channel to handle.
   + default
    0
   + type
    int
  + decay
   Envelope decay (in seconds).
   + default
    0.01
   + type
    float
  + envelope
   Use envelope.
   + default
    true
   + type
    bool
  + release
   Envelope release (in seconds).
   + default
    0.05
   + type
    float
  + sustain
   Envelope sustain level.
   + default
    0.9
   + type
    float
  + volume
   Initial volume.
   + default
    0.3
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video='#b,midi='#c+1)
 + synth.square
  Square synthesizer.
  + _category
   Source / Sound Synthesis
  + _type
   (?id:string,?attack:float,?channel:int,?decay:float,
 ?envelope:bool,?release:float,?sustain:float,
 ?volume:float,source(audio='#a+1,video='#b,midi='#c+1))->
source(audio='#a+1,video='#b,midi='#c+1)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + attack
   Envelope attack (in seconds).
   + default
    0.02
   + type
    float
  + channel
   MIDI channel to handle.
   + default
    0
   + type
    int
  + decay
   Envelope decay (in seconds).
   + default
    0.01
   + type
    float
  + envelope
   Use envelope.
   + default
    true
   + type
    bool
  + release
   Envelope release (in seconds).
   + default
    0.05
   + type
    float
  + sustain
   Envelope sustain level.
   + default
    0.9
   + type
    float
  + volume
   Initial volume.
   + default
    0.3
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video='#b,midi='#c+1)
 + system
  Shell command call. Set verbose to true to log process' output and errors.
  + _category
   System
  + _type
   (string)->unit
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + tan
  Tangent. Argument is in radians.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + tanh
  Hyperbolic tangent. Argument is in radians.
  + _category
   Math
  + _type
   (float)->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    float
 + test_process
  Return true if process exited with 0 code.
  + _category
   System
  + timeout
   Cancel process after @timeout@ has elapsed. Ignored if negative.
   + default
    -1.0
   + type
    float
  + env
   Process environment
   + default
    []
   + type
    [(string*string)]
  + inherit_env
   Inherit calling process's environment when @env@ parameter is empty.
   + default
    true
   + type
    bool
  + (unlabeled)
   Command to test
   + default
    None
   + type
    string
  + _type
   (?timeout:float,?env:[(string*string)],?inherit_env:bool,
 string)->bool
 + text2wave_protocol
  Register the text2wave: protocol using text2wav
  + _flag
   hidden
  + rlog
   (no doc)
   + default
    None
   + type
    'a
  + maxtime
   (no doc)
   + default
    None
   + type
    'b
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (rlog:'a,maxtime:'b,string)->[string]
 + time
  Return the current time since 00:00:00 GMT, Jan. 1, 1970, in seconds.
  + _category
   System
  + _type
   ()->float
 + time_in_mod
  INTERNAL: time_in_mod(a,b,c) checks that the unix time T satisfies a <= T mod c < b
  + _category
   Other
  + _type
   (int,int,int)->bool
  + _flag
   hidden
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    int
 + tmp_protocol
  Register tmp
  + _flag
   hidden
  + rlog
   (no doc)
   + default
    None
   + type
    'a
  + maxtime
   (no doc)
   + default
    None
   + type
    'b
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    'c
  + _type
   (rlog:'a,maxtime:'b,'c)->['c]
 + unsafe.single.infallible
  Loops on a request, which has to be ready and should be persistent. WARNING: if used uncarefully, it can crash your application!
  + _category
   Source / Input
  + _type
   (?id:string,request('a))->source('a)
  + _flag
   hidden
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    request('a)
 + url.decode
  Decode an encoded url (e.g. "%20" becomes " ").
  + _category
   String
  + _type
   (?plus:bool,string)->string
  + plus
   (no doc)
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + url.encode
  Encode an url (e.g. " " becomes "%20").
  + _category
   String
  + _type
   (?plus:bool,string)->string
  + plus
   (no doc)
   + default
    true
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + url.split
  Split an url of the form foo?arg=bar&arg2=bar2 into ("foo",[("arg","bar"),("arg2","bar2")]).
  + _category
   String
  + (unlabeled)
   Url to split
   + default
    None
   + type
    string
  + _type
   (string)->(string*[(string*string)])
 + url.split_args
  Split the arguments of an url of the form arg=bar&arg2=bar2 into [("arg","bar"),("arg2","bar2")].
  + _category
   String
  + (unlabeled)
   Agument string to split
   + default
    None
   + type
    string
  + _type
   (string)->[(string*string)]
 + video.add_image
  Add a static image on the first video channel.
  + _category
   Source / Video Processing
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + width
   Scale to width (zero means frame width, negative means original width).
   + default
    0
   + type
    int
  + height
   Scale to height (zero means frame height, negative means original height).
   + default
    0
   + type
    int
  + x
   x position.
   + default
    4611686018427387903
   + type
    int
  + y
   y position.
   + default
    4611686018427387903
   + type
    int
  + file
   Path to the image file.
   + default
    None
   + type
    'a
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c,midi=0)
  + _type
   (?id:string,?width:int,?height:int,?x:int,?y:int,file:'a,
 source(audio='#b,video='#c,midi=0))->
source(audio='#b,video='#c,midi=0)
 + video.fade.final
  Fade a stream to black.
  + _category
   Source / Video Processing
  + _type
   (?id:string,?duration:float,?transition:string,
 ?type:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the fading. This value can be set on a per-file basis using the metadata field passed as override.
   + default
    3.0
   + type
    float
  + transition
   Kind of transition (fade|slide_left|slide_right|slide_up|slide_down|grow|disc|random).
   + default
    "fade"
   + type
    string
  + type
   Fader shape (lin|sin|log|exp): linear, sinusoidal, logarithmic or exponential.
   + default
    "lin"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.fade.in
  Fade the beginning of tracks. Metadata 'liq_video_fade_in' can be used to set the duration for a specific track (float in seconds).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?duration:float,?override:string,
 ?transition:string,?type:string,
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the fading. This value can be set on a per-file basis using the metadata field passed as override.
   + default
    3.0
   + type
    float
  + override
   Metadata field which, if present and containing a float, overrides the 'duration' parameter for current track.
   + default
    "liq_video_fade_in"
   + type
    string
  + transition
   Kind of transition (fade|slide_left|slide_right|slide_up|slide_down|grow|disc|random).
   + default
    "fade"
   + type
    string
  + type
   Fader shape (lin|sin|log|exp): linear, sinusoidal, logarithmic or exponential.
   + default
    "lin"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.fade.initial
  Fade the beginning of a stream.
  + _category
   Source / Video Processing
  + _type
   (?id:string,?duration:float,?transition:string,
 ?type:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the fading. This value can be set on a per-file basis using the metadata field passed as override.
   + default
    3.0
   + type
    float
  + transition
   Kind of transition (fade|slide_left|slide_right|slide_up|slide_down|grow|disc|random).
   + default
    "fade"
   + type
    string
  + type
   Fader shape (lin|sin|log|exp): linear, sinusoidal, logarithmic or exponential.
   + default
    "lin"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.fade.out
  Fade the end of tracks. Metadata 'liq_video_fade_out' can be used to set the duration for a specific track (float in seconds).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?duration:float,?override:string,
 ?transition:string,?type:string,
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + duration
   Duration of the fading. This value can be set on a per-file basis using the metadata field passed as override.
   + default
    3.0
   + type
    float
  + override
   Metadata field which, if present and containing a float, overrides the 'duration' parameter for current track.
   + default
    "liq_video_fade_out"
   + type
    string
  + transition
   Kind of transition (fade|slide_left|slide_right|slide_up|slide_down|grow|disc|random).
   + default
    "fade"
   + type
    string
  + type
   Fader shape (lin|sin|log|exp): linear, sinusoidal, logarithmic or exponential.
   + default
    "lin"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.fill
  Fill frame with a color.
  + _category
   Source / Video Processing
  + _type
   (?id:string,?color:int,
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + color
   Color to fill the image with.
   + default
    0
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r._3_point_color_balance
  Adjust color balance with 3 color points (by Maksim Golovkin).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?black_color:int,?gray_color:int,
 ?source_image_on_left_side:bool,?split_preview:bool,
 ?white_color:int,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + black_color
   Black color.
   + default
    0
   + type
    int
  + gray_color
   Gray color.
   + default
    8355711
   + type
    int
  + source_image_on_left_side
   Source image on left side.
   + default
    true
   + type
    bool
  + split_preview
   Split privew.
   + default
    true
   + type
    bool
  + white_color
   White color.
   + default
    16777215
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r._3dflippo
  Frame rotation in 3d-space (by c.e. prelz AS FLUIDO <fluido(at)fluido.as>).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?center_position:'a,?center_position:'b,
 ?don't_blank_mask:bool,?fill_with_image_or_black:bool,
 ?invert_rotation_assignment:bool,?x_axis_rotation:'c,
 ?x_axis_rotation_rate:'d,?y_axis_rotation:'e,
 ?y_axis_rotation_rate:'f,?z_axis_rotation:'g,
 ?z_axis_rotation_rate:'h,
 source(audio='#i,video='#j+1,midi='#k))->
source(audio='#i,video='#j+1,midi='#k)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + center_position
   Position of the center of rotation on the X axis.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + center_position
   Position of the center of rotation on the Y axis.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + don't_blank_mask
   Mask for frame transposition is not blanked, so a trace of old transpositions is maintained.
   + default
    false
   + type
    bool
  + fill_with_image_or_black
   If true, pixels that are not transposed are black, otherwise, they are copied with the original.
   + default
    false
   + type
    bool
  + invert_rotation_assignment
   If true, when mapping rotation, make inverted (wrong) assignment.
   + default
    false
   + type
    bool
  + x_axis_rotation
   Rotation on the X axis.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + x_axis_rotation_rate
   Rotation rate on the X axis.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + y_axis_rotation
   Rotation on the Y axis.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + y_axis_rotation_rate
   Rotation rate on the Y axis.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + z_axis_rotation
   Rotation on the Z axis.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + z_axis_rotation_rate
   Rotation rate on the Z axis.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#i,video='#j+1,midi='#k)
 + video.frei0r.addition
  Perform an RGB[A] addition operation of the pixel sources (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.addition_alpha
  Perform an RGB[A] addition_alpha operation of the pixel sources (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.alpha0ps
  Display and manipulation of the alpha channel (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?display:'a,?display_input_alpha:bool,
 ?invert:bool,?operation:'b,?shrink_grow_blur_amount:'c,
 ?threshold:'d,source(audio='#e,video='#f+1,midi='#g))->
source(audio='#e,video='#f+1,midi='#g)
where 'a, 'b, 'c, 'd is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + display
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + display_input_alpha
   .
   + default
    false
   + type
    bool
  + invert
   .
   + default
    false
   + type
    bool
  + operation
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + shrink_grow_blur_amount
   .
   + default
    0.333344429731
   + type
    anything that is either float or ()->float
  + threshold
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#e,video='#f+1,midi='#g)
 + video.frei0r.alpha_injection
  Averages Input 1 and uses this as Alpha Channel on Input 2 (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.alphaatop
  The alpha ATOP operation (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.alphagrad
  Fills alpha channel with a gradient (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?max:'a,?min:'b,?operation:'c,?position:'d,
 ?tilt:'e,?transition_width:'f,
 source(audio='#g,video='#h+1,midi='#i))->
source(audio='#g,video='#h+1,midi='#i)
where 'a, 'b, 'c, 'd, 'e, 'f is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + max
   .
   + default
    1.0
   + type
    anything that is either float or ()->float
  + min
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + operation
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + position
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + tilt
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + transition_width
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#g,video='#h+1,midi='#i)
 + video.frei0r.alphain
  The alpha IN operation (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.alphaout
  The alpha OUT operation (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.alphaover
  The alpha OVER operation (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.alphaspot
  Draws simple shapes into the alpha channel (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?max:'a,?min:'b,?operation:'c,?position_x:'d,
 ?position_y:'e,?shape:'f,?size_x:'g,?size_y:'h,?tilt:'i,
 ?transition_width:'j,
 source(audio='#k,video='#l+1,midi='#m))->
source(audio='#k,video='#l+1,midi='#m)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + max
   .
   + default
    1.0
   + type
    anything that is either float or ()->float
  + min
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + operation
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + position_x
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + position_y
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + shape
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + size_x
   .
   + default
    0.10000000149
   + type
    anything that is either float or ()->float
  + size_y
   .
   + default
    0.10000000149
   + type
    anything that is either float or ()->float
  + tilt
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + transition_width
   .
   + default
    0.20000000298
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#k,video='#l+1,midi='#m)
 + video.frei0r.alphaxor
  The alpha XOR operation (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.b
  Extracts Blue from Image (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.baltan
  Delayed alpha smoothed blit of time (by Kentaro, Jaromil).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.bgsubtract0r
  Bluescreen the background of a static video (by Samuel Mimram).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?blur:'a,?denoise:bool,?threshold:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + blur
   Blur alpha channel by given radius (to remove sharp edges).
   + default
    0.0
   + type
    anything that is either float or ()->float
  + denoise
   Remove noise.
   + default
    true
   + type
    bool
  + threshold
   Threshold for difference.
   + default
    0.101960784314
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.blend
  Perform a blend operation between two sources (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?blend:'a,
 source(audio='#b,video='#c+1,midi='#d),
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + blend
   blend factor.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.bluescreen0r
  Color to alpha (blit SRCALPHA) (by Hedde Bosman).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?color:int,?distance:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + color
   The color to make transparent (B G R).
   + default
    61184
   + type
    int
  + distance
   Distance to Color (127 is good).
   + default
    0.288
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.brightness
  Adjusts the brightness of a source image (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?brightness:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + brightness
   The brightness value.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.burn
  Perform an RGB[A] dodge operation between the pixel sources, using the generalised algorithm:
D = saturation of 255 or depletion of 0, of ((255 - A) * 256) / (B + 1) (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.bw0r
  Turns image black/white (by coma(at)gephex.org).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.c0rners
  Four corners geometry engine (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?alpha_operation:'a,?corner_1_x:'b,
 ?corner_1_y:'c,?corner_2_x:'d,?corner_2_y:'e,
 ?corner_3_x:'f,?corner_3_y:'g,?corner_4_x:'h,
 ?corner_4_y:'i,?enable_stretch:bool,?feather_alpha:'j,
 ?interpolator:'k,?stretch_x:'l,?stretch_y:'m,
 ?transparent_background:bool,
 source(audio='#n,video='#o+1,midi='#p))->
source(audio='#n,video='#o+1,midi='#p)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + alpha_operation
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + corner_1_x
   X coordinate of corner 1.
   + default
    0.33333298564
   + type
    anything that is either float or ()->float
  + corner_1_y
   Y coordinate of corner 1.
   + default
    0.33333298564
   + type
    anything that is either float or ()->float
  + corner_2_x
   X coordinate of corner 2.
   + default
    0.666665971279
   + type
    anything that is either float or ()->float
  + corner_2_y
   Y coordinate of corner 2.
   + default
    0.33333298564
   + type
    anything that is either float or ()->float
  + corner_3_x
   X coordinate of corner 3.
   + default
    0.666665971279
   + type
    anything that is either float or ()->float
  + corner_3_y
   Y coordinate of corner 3.
   + default
    0.666665971279
   + type
    anything that is either float or ()->float
  + corner_4_x
   X coordinate of corner 4.
   + default
    0.33333298564
   + type
    anything that is either float or ()->float
  + corner_4_y
   Y coordinate of corner 4.
   + default
    0.666665971279
   + type
    anything that is either float or ()->float
  + enable_stretch
   Enable stretching.
   + default
    false
   + type
    bool
  + feather_alpha
   Makes smooth transition into transparent.
   + default
    0.00999999977648
   + type
    anything that is either float or ()->float
  + interpolator
   Quality of interpolation.
   + default
    0.166666671634
   + type
    anything that is either float or ()->float
  + stretch_x
   Amount of stretching in X direction.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + stretch_y
   Amount of stretching in Y direction.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + transparent_background
   Makes background transparent.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#n,video='#o+1,midi='#p)
 + video.frei0r.cartoon
  Cartoonify video, do a form of edge detect (by Dries Pruimboom, Jaromil).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?diffspace:'a,?triplevel:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + diffspace
   difference space: a value from 0 to 256 (mapped to [0,1]).
   + default
    0.00390625
   + type
    anything that is either float or ()->float
  + triplevel
   level of trip: mapped to [0,1] asymptotical.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.color_distance
  Calculates the distance between the selected color and the current pixel and uses that value as new pixel value (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?color:int,
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + color
   The Source Color.
   + default
    8355711
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.color_only
  Perform a conversion to color only of the source input1 using the hue and saturation values of input2 (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.coloradj_rgb
  Simple color adjustment (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?action:'a,?alpha_controlled:bool,?b:'b,
 ?g:'c,?keep_luma:bool,?luma_formula:'d,?r:'e,
 source(audio='#f,video='#g+1,midi='#h))->
source(audio='#f,video='#g+1,midi='#h)
where 'a, 'b, 'c, 'd, 'e is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + action
   Type of color adjustment.
   + default
    0.333344429731
   + type
    anything that is either float or ()->float
  + alpha_controlled
   Adjust only areas with nonzero alpha.
   + default
    false
   + type
    bool
  + b
   Amount of blue.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + g
   Amount of green.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + keep_luma
   Don't change brightness.
   + default
    true
   + type
    bool
  + luma_formula
   .
   + default
    0.500025033951
   + type
    anything that is either float or ()->float
  + r
   Amount of red.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#f,video='#g+1,midi='#h)
 + video.frei0r.colorhalftone
  Filters image to resemble a halftone print in which tones are represented as variable sized dots (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?cyan_angle:'a,?dot_radius:'b,
 ?magenta_angle:'c,?yellow_angle:'d,
 source(audio='#e,video='#f+1,midi='#g))->
source(audio='#e,video='#f+1,midi='#g)
where 'a, 'b, 'c, 'd is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + cyan_angle
   Cyan dots angle.
   + default
    0.3
   + type
    anything that is either float or ()->float
  + dot_radius
   Halftone pattern dot size.
   + default
    0.4
   + type
    anything that is either float or ()->float
  + magenta_angle
   Magenta dots angle.
   + default
    0.45
   + type
    anything that is either float or ()->float
  + yellow_angle
   Yellow dots angle.
   + default
    0.25
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#e,video='#f+1,midi='#g)
 + video.frei0r.colorize
  Colorizes image to selected hue, saturation and lightness (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?hue:'a,?lightness:'b,?saturation:'c,
 source(audio='#d,video='#e+1,midi='#f))->
source(audio='#d,video='#e+1,midi='#f)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + hue
   Color shade of the colorized image.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + lightness
   Lightness of the colorized image.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + saturation
   Amount of color in the colorized image.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#d,video='#e+1,midi='#f)
 + video.frei0r.colortap
  Applies a pre-made color effect to image (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?table:string,
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + table
   Lookup table used to filter colors. One of: xpro, sepia, heat, red_green, old_photo, xray, esses, yellow_blue.
   + default
    "\160H\1924\217\127"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.composition
  Composites Image 2 onto Image 1 according to its Alpha Channel (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.contrast0r
  Adjusts the contrast of a source image (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?contrast:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + contrast
   The contrast value.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.darken
  Perform a darken operation between two sources (minimum value of both sources) (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.defish0r
  Non rectilinear lens mappings (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?amount:'a,?aspect_type:'b,?defish:bool,
 ?interpolator:'c,?manual_aspect:'d,?manual_scale:'e,
 ?scaling:'f,?type:'g,
 source(audio='#h,video='#i+1,midi='#j))->
source(audio='#h,video='#i+1,midi='#j)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + amount
   Focal Ratio.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + aspect_type
   Pixel aspect ratio presets.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + defish
   Fish or Defish.
   + default
    false
   + type
    bool
  + interpolator
   Quality of interpolation.
   + default
    0.166666671634
   + type
    anything that is either float or ()->float
  + manual_aspect
   Manual Pixel Aspect ratio.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + manual_scale
   Manual Scale.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + scaling
   Scaling method.
   + default
    0.666666686535
   + type
    anything that is either float or ()->float
  + type
   Mapping function.
   + default
    0.666666686535
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#h,video='#i+1,midi='#j)
 + video.frei0r.delay0r
  Video delay (by Martin Bayer).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?delaytime:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + delaytime
   the delay time.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.delaygrab
  Delayed frame blitting mapped on a time bitmap (by Bill Spinhover, Andreas Schiffler, Jaromil).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.difference
  Perform an RGB[A] difference operation between the pixel sources (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.distort0r
  Plasma (by Gephex crew).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?amplitude:'a,?frequency:'b,
 ?use_velocity:bool,?velocity:'c,
 source(audio='#d,video='#e+1,midi='#f))->
source(audio='#d,video='#e+1,midi='#f)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + amplitude
   The amplitude of the plasma signal.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + frequency
   The frequency of the plasma signal.
   + default
    0.005
   + type
    anything that is either float or ()->float
  + use_velocity
   'Time Based' or 'Adjustable Velocity'.
   + default
    false
   + type
    bool
  + velocity
   Changing speed of the plasma signal.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#d,video='#e+1,midi='#f)
 + video.frei0r.dither
  Dithers the image and reduces the number of available colors (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?levels:'a,?matrixid:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + levels
   Number of values per channel.
   + default
    0.104166666667
   + type
    anything that is either float or ()->float
  + matrixid
   Id of matrix used for dithering.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.divide
  Perform an RGB[A] divide operation between the pixel sources: input1 is the numerator, input2 the denominator (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.dodge
  Perform an RGB[A] dodge operation between the pixel sources, using the generalised algorithm:
D = saturation of 255 or (A * 256) / (256 - B) (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.edgeglow
  Edgeglow filter (by Salsaman).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?lredscale:'a,?lthresh:'b,?lupscale:'c,
 source(audio='#d,video='#e+1,midi='#f))->
source(audio='#d,video='#e+1,midi='#f)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + lredscale
   multiplier for downscaling non-edge brightness.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + lthresh
   threshold for edge lightening.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + lupscale
   multiplier for upscaling edge brightness.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#d,video='#e+1,midi='#f)
 + video.frei0r.emboss
  Creates embossed relief image of source image (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?azimuth:'a,?elevation:'b,?width45:'c,
 source(audio='#d,video='#e+1,midi='#f))->
source(audio='#d,video='#e+1,midi='#f)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + azimuth
   Light direction.
   + default
    0.375
   + type
    anything that is either float or ()->float
  + elevation
   Background lightness.
   + default
    0.333333333333
   + type
    anything that is either float or ()->float
  + width45
   Bump height.
   + default
    0.25
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#d,video='#e+1,midi='#f)
 + video.frei0r.equaliz0r
  Equalizes the intensity histograms (by Jean-Sebastien Senecal (Drone)).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.flippo
  Flipping in x and y axis (by Carlo Emilio, Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?x_axis:bool,?y_axis:bool,
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + x_axis
   Flipping on the horizontal axis.
   + default
    false
   + type
    bool
  + y_axis
   Flipping on the vertical axis.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.g
  Extracts Green from Image (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.gamma
  Adjusts the gamma value of a source image (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?gamma:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + gamma
   The gamma value.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.glitch0r
  Adds glitches and block shifting (by IDENT Software).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?block_height:'a,
 ?color_glitching_intensity:'b,?glitch_frequency:'c,
 ?shift_intensity:'d,
 source(audio='#e,video='#f+1,midi='#g))->
source(audio='#e,video='#f+1,midi='#g)
where 'a, 'b, 'c, 'd is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + block_height
   Height range of the block that will be shifted/glitched.
   + default
    0.428571428571
   + type
    anything that is either float or ()->float
  + color_glitching_intensity
   How intensive should be color distortion.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + glitch_frequency
   How frequently the glitch should be applied.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + shift_intensity
   How much we should move blocks when glitching.
   + default
    0.428571428571
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#e,video='#f+1,midi='#g)
 + video.frei0r.glow
  Creates a Glamorous Glow (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?blur:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + blur
   Blur of the glow.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.grain_extract
  Perform an RGB[A] grain-extract operation between the pixel sources (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.grain_merge
  Perform an RGB[A] grain-merge operation between the pixel sources (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.hardlight
  Perform an RGB[A] hardlight operation between the pixel sources (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.hqdn3d
  High quality 3D denoiser from Mplayer (by Marko Cebokli, Daniel Moreno).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?spatial:'a,?temporal:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + spatial
   Amount of spatial filtering.
   + default
    0.0399999991059
   + type
    anything that is either float or ()->float
  + temporal
   Amount of temporal filtering.
   + default
    0.0599999986589
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.hue
  Perform a conversion to hue only of the source input1 using the hue of input2 (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.hueshift0r
  Shifts the hue of a source image (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?hue:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + hue
   The shift value.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.iir_blur
  Three types of fast IIR blurring (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?amount:'a,?edge:bool,?type:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + amount
   Amount of blur.
   + default
    0.200000017881
   + type
    anything that is either float or ()->float
  + edge
   Edge compensation.
   + default
    true
   + type
    bool
  + type
   Blur type.
   + default
    0.333344429731
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.invert0r
  Inverts all colors of a source image (by Gephex crew).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.ising0r
  Generates ising noise (by Gephex crew).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?border_growth:'a,?spontaneous_growth:'b,
 ?temperature:'c)->source(audio=0,video=1,midi=0)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + border_growth
   Border Growth.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + spontaneous_growth
   Spontaneous Growth.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + temperature
   Noise Temperature.
   + default
    0.0
   + type
    anything that is either float or ()->float
 + video.frei0r.k_means_clustering
  Clusters of a source image by color and spatial distance (by binarymillenium).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?dist_weight:'a,?num:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + dist_weight
   The weight on distance.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + num
   The number of clusters.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.lens_correction
  Allows compensation of lens distortion (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?brightness:'a,?correction_near_center:'b,
 ?correction_near_edges:'c,?x_center:'d,?y_center:'e,
 source(audio='#f,video='#g+1,midi='#h))->
source(audio='#f,video='#g+1,midi='#h)
where 'a, 'b, 'c, 'd, 'e is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + brightness
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + correction_near_center
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + correction_near_edges
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + x_center
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + y_center
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#f,video='#g+1,midi='#h)
 + video.frei0r.letterb0xed
  Adds Black Borders at top and bottom for Cinema Look (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?border_width:'a,?transparency:bool,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + border_width
   .
   + default
    0.4
   + type
    anything that is either float or ()->float
  + transparency
   .
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.levels
  Adjust luminance or color channel intensity (by Maksim Golovkin).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?black_output:'a,?channel:'b,?gamma:'c,
 ?histogram_position:'d,?input_black_level:'e,
 ?input_white_level:'f,?show_histogram:bool,
 ?white_output:'g,source(audio='#h,video='#i+1,midi='#j))->
source(audio='#h,video='#i+1,midi='#j)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + black_output
   Black output.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + channel
   Channel to adjust levels.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + gamma
   Gamma.
   + default
    0.25
   + type
    anything that is either float or ()->float
  + histogram_position
   Histogram position.
   + default
    0.3
   + type
    anything that is either float or ()->float
  + input_black_level
   Input black level.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + input_white_level
   Input white level.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + show_histogram
   Show histogram.
   + default
    true
   + type
    bool
  + white_output
   White output.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#h,video='#i+1,midi='#j)
 + video.frei0r.light_graffiti
  Creates light graffitis from a video by keeping the brightest spots (by Simon A. Eugster (Granjow)).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?backgroundweight:'a,?blackreference:'b,
 ?dim:'c,?longalpha:'d,?loweroverexposure:'e,
 ?nonlineardim:'f,?reset:'g,?saturation:'h,
 ?sensitivity:'i,?statsbrightness:'j,?statsdifference:'k,
 ?statsdiffsum:'l,?thresholdbrightness:'m,
 ?thresholddifference:'n,?thresholddiffsum:'o,
 ?transparentbackground:'p,
 source(audio='#q,video='#r+1,midi='#s))->
source(audio='#q,video='#r+1,midi='#s)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + backgroundweight
   Describes how strong the (accumulated) background should shine through.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + blackreference
   Uses black as background image instead of the first frame..
   + default
    0.0
   + type
    anything that is either float or ()->float
  + dim
   Dimming of the light mask.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + longalpha
   Alpha value for moving average.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + loweroverexposure
   Prevents some overexposure if the light source stays steady too long (varying speed).
   + default
    0.0
   + type
    anything that is either float or ()->float
  + nonlineardim
   Nonlinear dimming (may look more natural).
   + default
    0.0
   + type
    anything that is either float or ()->float
  + reset
   Reset filter masks.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + saturation
   Saturation of lights.
   + default
    0.25
   + type
    anything that is either float or ()->float
  + sensitivity
   Sensitivity of the effect for light (higher sensitivity will lead to brighter lights).
   + default
    0.2
   + type
    anything that is either float or ()->float
  + statsbrightness
   Display the brightness and threshold, for adjusting the brightness threshold parameter.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + statsdifference
   Display the background difference and threshold.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + statsdiffsum
   Display the sum of the background difference and the threshold.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + thresholdbrightness
   Brightness threshold to distinguish between foreground and background.
   + default
    0.588235294118
   + type
    anything that is either float or ()->float
  + thresholddifference
   Threshold: Difference to background to distinguish between fore- and background.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + thresholddiffsum
   Threshold for sum of differences. Can in most cases be ignored (set to 0)..
   + default
    0.0
   + type
    anything that is either float or ()->float
  + transparentbackground
   Make the background transparent.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#q,video='#r+1,midi='#s)
 + video.frei0r.lighten
  Perform a lighten operation between two sources (maximum value of both sources) (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.lissajous0r
  Generates Lissajous0r images (by Martin Bayer).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?ratiox:'a,?ratioy:'b)->
source(audio=0,video=1,midi=0)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + ratiox
   x-ratio.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + ratioy
   y-ratio.
   + default
    0.0
   + type
    anything that is either float or ()->float
 + video.frei0r.luminance
  Creates a luminance map of the image (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.mask0mate
  Creates an square alpha-channel mask (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?blur:'a,?bottom:'b,?invert:bool,?left:'c,
 ?right:'d,?top:'e,
 source(audio='#f,video='#g+1,midi='#h))->
source(audio='#f,video='#g+1,midi='#h)
where 'a, 'b, 'c, 'd, 'e is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + blur
   Blur the outline of the mask.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + bottom
   .
   + default
    0.2
   + type
    anything that is either float or ()->float
  + invert
   Invert the mask, creates a hole in the frame..
   + default
    false
   + type
    bool
  + left
   .
   + default
    0.2
   + type
    anything that is either float or ()->float
  + right
   .
   + default
    0.2
   + type
    anything that is either float or ()->float
  + top
   .
   + default
    0.2
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#f,video='#g+1,midi='#h)
 + video.frei0r.medians
  Implements several median-type filters (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?size:'a,?type:string,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + size
   Size for 'var size' type filter.
   + default
    0.10000000149
   + type
    anything that is either float or ()->float
  + type
   Choose type of median: Cross5, Square3x3, Bilevel, Diamond3x3, Square5x5, Temp3, Temp5, ArceBI, ML3D, ML3dEX, VarSize.
   + default
    "`\222\1924\217\127"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.multiply
  Perform an RGB[A] multiply operation between the pixel sources (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.ndvi_filter
  This filter creates a false image from a visible + infrared source (by Brian Matherly).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?color_map:string,?index_calculation:string,
 ?legend:string,?levels:'a,?nir_channel:string,
 ?nir_offset:'b,?nir_scale:'c,?vis_offset:'d,
 ?vis_scale:'e,?visible_channel:string,
 source(audio='#f,video='#g+1,midi='#h))->
source(audio='#f,video='#g+1,midi='#h)
where 'a, 'b, 'c, 'd, 'e is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + color_map
   The color map to use. One of 'earth', 'grayscale', 'heat' or 'rainbow'..
   + default
    "Ii\1934\217\127"
   + type
    string
  + index_calculation
   The index calculation to use. One of 'ndvi' or 'vi'..
   + default
    "\177i\1934\217\127"
   + type
    string
  + legend
   Control legend display. One of 'off' or 'bottom'..
   + default
    "\201i\1934\217\127"
   + type
    string
  + levels
   The number of color levels to use in the false image (divided by 1000)..
   + default
    0.256
   + type
    anything that is either float or ()->float
  + nir_channel
   The channel to use for the near-infrared component. One of 'r', 'g', or 'b'..
   + default
    "\153i\1934\217\127"
   + type
    string
  + nir_offset
   An offset to be applied to the near-infrared component (mapped to [-100%, 100%]..
   + default
    0.5
   + type
    anything that is either float or ()->float
  + nir_scale
   A scaling factor to be applied to the near-infrared component (divided by 10)..
   + default
    0.1
   + type
    anything that is either float or ()->float
  + vis_offset
   An offset to be applied to the visible component (mapped to [-100%, 100%]..
   + default
    0.5
   + type
    anything that is either float or ()->float
  + vis_scale
   A scaling factor to be applied to the visible component (divided by 10)..
   + default
    0.1
   + type
    anything that is either float or ()->float
  + visible_channel
   The channel to use for the visible component. One of 'r', 'g', or 'b'..
   + default
    "\129i\1934\217\127"
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#f,video='#g+1,midi='#h)
 + video.frei0r.nervous
  Flushes frames in time in a nervous way (by Tannenbaum, Kentaro, Jaromil).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.nikon_d90_stairstepping_fix
  Removes the Stairstepping from Nikon D90 videos (720p only) by interpolation (by Simon A. Eugster (Granjow)).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.nois0r
  Generates white noise images (by Martin Bayer).
  + _category
   Source / Video Processing
  + _type
   (?id:string)->source(audio=0,video=1,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
 + video.frei0r.nosync0r
  Broken tv (by Martin Bayer).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?hsync:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + hsync
   the hsync offset.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.onecol0r
  Image with just one color (by Martin Bayer).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?color:int)->source(audio=0,video=1,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + color
   the color of the image.
   + default
    0
   + type
    int
 + video.frei0r.overlay
  Perform an RGB[A] overlay operation between the pixel sources, using the generalised algorithm:
D =  A * (B + (2 * B) * (255 - A)) (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.partik0l
  Particles generated on prime number sinusoidal blossoming (by Jaromil).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?down:'a,?up:'b)->
source(audio=0,video=1,midi=0)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + down
   blossom on a lower prime number.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + up
   blossom on a higher prime number.
   + default
    0.0
   + type
    anything that is either float or ()->float
 + video.frei0r.perspective
  Distorts the image for a pseudo perspective (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?bottom_left:(float*float),
 ?bottom_right:(float*float),?top_left:(float*float),
 ?top_right:(float*float),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + bottom_left
   .
   + default
    (0.0,1.0)
   + type
    (float*float)
  + bottom_right
   .
   + default
    (1.0,1.0)
   + type
    (float*float)
  + top_left
   .
   + default
    (0.0,0.0)
   + type
    (float*float)
  + top_right
   .
   + default
    (1.0,0.0)
   + type
    (float*float)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.pixeliz0r
  Pixelize input image (by Gephex crew).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?block_height:'a,?block_width:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + block_height
   Vertical size of one "pixel".
   + default
    1.75
   + type
    anything that is either float or ()->float
  + block_width
   Horizontal size of one "pixel".
   + default
    1.75
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.plasma
  Demo scene 8bit plasma (by Jaromil).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?_1_move:'a,?_1_speed:'b,?_2_move:'c,
 ?_2_speed:'d,?_3_speed:'e,?_4_speed:'f)->
source(audio=0,video=1,midi=0)
where 'a, 'b, 'c, 'd, 'e, 'f is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + _1_move
    .
   + default
    1.0
   + type
    anything that is either float or ()->float
  + _1_speed
    .
   + default
    1.0
   + type
    anything that is either float or ()->float
  + _2_move
    .
   + default
    1.0
   + type
    anything that is either float or ()->float
  + _2_speed
    .
   + default
    1.0
   + type
    anything that is either float or ()->float
  + _3_speed
    .
   + default
    1.0
   + type
    anything that is either float or ()->float
  + _4_speed
    .
   + default
    1.0
   + type
    anything that is either float or ()->float
 + video.frei0r.posterize
  Posterizes image by reducing the number of colors used in image (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?levels:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + levels
   Number of values per channel.
   + default
    0.104166666667
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.pr0be
  Measure video values (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?_256_scale:bool,?big_window:bool,
 ?measurement:'a,?show_alpha:bool,?x:'b,?x_size:'c,?y:'d,
 ?y_size:'e,source(audio='#f,video='#g+1,midi='#h))->
source(audio='#f,video='#g+1,midi='#h)
where 'a, 'b, 'c, 'd, 'e is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + _256_scale
   use 0-255 instead of 0.0-1.0.
   + default
    false
   + type
    bool
  + big_window
   Display more data.
   + default
    false
   + type
    bool
  + measurement
   What measurement to display.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + show_alpha
   Display alpha value too.
   + default
    false
   + type
    bool
  + x
   X position of probe.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + x_size
   X size of probe.
   + default
    0.25
   + type
    anything that is either float or ()->float
  + y
   Y position of probe.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + y_size
   Y size of probe.
   + default
    0.25
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#f,video='#g+1,midi='#h)
 + video.frei0r.pr0file
  2D video oscilloscope (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?_256_scale:bool,?alpha_trace:bool,
 ?b_trace:bool,?channel:'a,?color:'b,?crosshair_color:'c,
 ?display_average:bool,?display_maximum:bool,
 ?display_minimum:bool,?display_rms:bool,?g_trace:bool,
 ?length:'d,?marker_1:'e,?marker_2:'f,?pb_trace:bool,
 ?pr_trace:bool,?r_trace:bool,?tilt:'g,?x:'h,?y:'i,
 ?y_trace:bool,source(audio='#j,video='#k+1,midi='#l))->
source(audio='#j,video='#k+1,midi='#l)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + _256_scale
   use 0-255 instead of 0.0-1.0.
   + default
    false
   + type
    bool
  + alpha_trace
   Show Alpha trace on scope.
   + default
    false
   + type
    bool
  + b_trace
   Show B trace on scope.
   + default
    true
   + type
    bool
  + channel
   Channel to numerically display.
   + default
    0.375004708767
   + type
    anything that is either float or ()->float
  + color
   rec 601 or rec 709.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + crosshair_color
   Color of the profile marker.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + display_average
   e.
   + default
    true
   + type
    bool
  + display_maximum
   .
   + default
    false
   + type
    bool
  + display_minimum
   .
   + default
    false
   + type
    bool
  + display_rms
   .
   + default
    true
   + type
    bool
  + g_trace
   Show G trace on scope.
   + default
    true
   + type
    bool
  + length
   Length of profile.
   + default
    1.61173498631
   + type
    anything that is either float or ()->float
  + marker_1
   Position of marker 1.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + marker_2
   Position of marker 2.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + pb_trace
   Show Pb trace on scope.
   + default
    false
   + type
    bool
  + pr_trace
   Show Pr trace on scope.
   + default
    false
   + type
    bool
  + r_trace
   Show R trace on scope.
   + default
    true
   + type
    bool
  + tilt
   Tilt of profile.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + x
   X position of profile.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + y
   Y position of profile.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + y_trace
   Show Y' trace on scope.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#j,video='#k+1,midi='#l)
 + video.frei0r.primaries
  Reduce image to primary colors (by Hedde Bosman).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?factor:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + factor
   influence of mean px value. > 32 = 0.
   + default
    1.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.r
  Extracts Red from Image (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.rgbnoise
  Adds RGB noise to image (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?noise:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + noise
   Amount of noise added.
   + default
    0.2
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.rgbsplit0r
  RGB splitting and shifting (by IDENT Software).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?horizontal_split_distance:'a,
 ?vertical_split_distance:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + horizontal_split_distance
   How far should layers be moved horizontally from each other.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + vertical_split_distance
   How far should layers be moved vertically from each other.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.saturat0r
  Adjusts the saturation of a source image (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?saturation:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + saturation
   The saturation value.
   + default
    0.125
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.saturation
  Perform a conversion to saturation only of the source input1 using the saturation level of input2 (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.scanline0r
  Interlaced blak lines (by Martin Bayer).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.screen
  Perform an RGB[A] screen operation between the pixel sources, using the generalised algorithm:
D = 255 - (255 - A) * (255 - B) (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.select0r
  Color based alpha selection (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?color_to_select:int,?delta_b___i___i:'a,
 ?delta_g___b___chroma:'b,?delta_r___a___hue:'c,
 ?edge_mode:'d,?invert_selection:bool,?operation:'e,
 ?selection_subspace:'f,?slope:'g,?subspace_shape:'h,
 source(audio='#i,video='#j+1,midi='#k))->
source(audio='#i,video='#j+1,midi='#k)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + color_to_select
   .
   + default
    52224
   + type
    int
  + delta_b___i___i
   .
   + default
    0.20000000298
   + type
    anything that is either float or ()->float
  + delta_g___b___chroma
   .
   + default
    0.20000000298
   + type
    anything that is either float or ()->float
  + delta_r___a___hue
   .
   + default
    0.20000000298
   + type
    anything that is either float or ()->float
  + edge_mode
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + invert_selection
   .
   + default
    false
   + type
    bool
  + operation
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + selection_subspace
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + slope
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + subspace_shape
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#i,video='#j+1,midi='#k)
 + video.frei0r.sharpness
  Unsharp masking (port from Mplayer) (by Marko Cebokli, Remi Guyomarch).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?amount:'a,?size:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + amount
   .
   + default
    0.300000011921
   + type
    anything that is either float or ()->float
  + size
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.sigmoidaltransfer
  Desaturates image and creates a particular look that could be called Stamp, Newspaper or Photocopy (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?brightness:'a,?sharpness:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + brightness
   Brightnesss of image.
   + default
    0.75
   + type
    anything that is either float or ()->float
  + sharpness
   Sharpness of transfer.
   + default
    0.85
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.sobel
  Sobel filter (by Jean-Sebastien Senecal (Drone)).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.softglow
  Does softglow effect on highlights (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?blur:'a,?blurblend:'b,?brightness:'c,
 ?sharpness:'d,source(audio='#e,video='#f+1,midi='#g))->
source(audio='#e,video='#f+1,midi='#g)
where 'a, 'b, 'c, 'd is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + blur
   Blur of the glow.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + blurblend
   Blend mode used to blend highlight blur with input image.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + brightness
   Brightness of highlight areas.
   + default
    0.75
   + type
    anything that is either float or ()->float
  + sharpness
   Sharpness of highlight areas.
   + default
    0.85
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#e,video='#f+1,midi='#g)
 + video.frei0r.softlight
  Perform an RGB[A] softlight operation between the pixel sources (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.sop_sat
  Slope/Offset/Power and Saturation color corrections according to the ASC CDL (Color Decision List) (by Simon A. Eugster (Granjow)).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?aoffset:'a,?apower:'b,?aslope:'c,
 ?boffset:'d,?bpower:'e,?bslope:'f,?goffset:'g,
 ?gpower:'h,?gslope:'i,?roffset:'j,?rpower:'k,?rslope:'l,
 ?saturation:'m,source(audio='#n,video='#o+1,midi='#p))->
source(audio='#n,video='#o+1,midi='#p)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + aoffset
   Offset of the alpha component.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + apower
   Power (Gamma) of the alpha component.
   + default
    0.05
   + type
    anything that is either float or ()->float
  + aslope
   Slope of the alpha component.
   + default
    0.05
   + type
    anything that is either float or ()->float
  + boffset
   Offset of the blue color component.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + bpower
   Power (Gamma) of the blue color component.
   + default
    0.05
   + type
    anything that is either float or ()->float
  + bslope
   Slope of the blue color component.
   + default
    0.05
   + type
    anything that is either float or ()->float
  + goffset
   Offset of the green color component.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + gpower
   Power (Gamma) of the green color component.
   + default
    0.05
   + type
    anything that is either float or ()->float
  + gslope
   Slope of the green color component.
   + default
    0.05
   + type
    anything that is either float or ()->float
  + roffset
   Offset of the red color component.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + rpower
   Power (Gamma) of the red color component.
   + default
    0.05
   + type
    anything that is either float or ()->float
  + rslope
   Slope of the red color component.
   + default
    0.05
   + type
    anything that is either float or ()->float
  + saturation
   Overall saturation.
   + default
    0.1
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#n,video='#o+1,midi='#p)
 + video.frei0r.spillsupress
  Remove green or blue spill light from subjects shot in front of green or blue screen (by Janne Liljeblad).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?supresstype:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + supresstype
   Defines if green or blue screen spill suppress is applied.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.squareblur
  Variable-size square blur (by Drone).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?kernel_size:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + kernel_size
   The size of the kernel, as a proportion to its coverage of the image.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.subtract
  Perform an RGB[A] subtract operation of the pixel source input2 from input1 (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.tehroxx0r
  Something videowall-ish (by Coma).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?interval:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + interval
   Changing speed of small blocks.
   + default
    0.01
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.test_pat_b
  Generates test card lookalikes (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?aspect_type:'a,?manual_aspect:'b,?type:'c)->
source(audio=0,video=1,midi=0)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + aspect_type
   7 choices, pixel aspect ratio.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + manual_aspect
   Manual pixel aspect ratio (Aspect type 6).
   + default
    0.5
   + type
    anything that is either float or ()->float
  + type
   8 choices, select test pattern.
   + default
    0.0
   + type
    anything that is either float or ()->float
 + video.frei0r.test_pat_c
  Generates cross sections of color spaces (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?color_space:'a,?cross_section:'b,
 ?fullscreen:bool,?third_axis_value:'c)->
source(audio=0,video=1,midi=0)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + color_space
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + cross_section
   .
   + default
    0.0
   + type
    anything that is either float or ()->float
  + fullscreen
   .
   + default
    false
   + type
    bool
  + third_axis_value
   .
   + default
    0.5
   + type
    anything that is either float or ()->float
 + video.frei0r.test_pat_g
  Generates geometry test pattern images (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?aspect_type:'a,?manual_aspect:'b,
 ?negative:bool,?size_1:'c,?size_2:'d,?type:'e)->
source(audio=0,video=1,midi=0)
where 'a, 'b, 'c, 'd, 'e is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + aspect_type
   Pixel aspect ratio presets.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + manual_aspect
   Manual pixel aspect ratio.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + negative
   Polarity of image.
   + default
    false
   + type
    bool
  + size_1
   Size of major features.
   + default
    0.28125
   + type
    anything that is either float or ()->float
  + size_2
   Size of minor features.
   + default
    0.0625
   + type
    anything that is either float or ()->float
  + type
   Type of test pattern.
   + default
    0.0
   + type
    anything that is either float or ()->float
 + video.frei0r.test_pat_i
  Generates spatial impulse and step test patterns (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?amplitude:'a,?channel:'b,?negative:bool,
 ?tilt:'c,?type:'d,?width:'e)->
source(audio=0,video=1,midi=0)
where 'a, 'b, 'c, 'd, 'e is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + amplitude
   Amplitude (contrast) of the pattern.
   + default
    0.800000011921
   + type
    anything that is either float or ()->float
  + channel
   Into which color channel to draw.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + negative
   Change polarity of impulse/step.
   + default
    false
   + type
    bool
  + tilt
   Angle of step function.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + type
   Type of test pattern.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + width
   Width of impulse.
   + default
    0.0404040403664
   + type
    anything that is either float or ()->float
 + video.frei0r.test_pat_l
  Generates linearity checking patterns (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?channel:'a,?type:'b)->
source(audio=0,video=1,midi=0)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + channel
   Into which color channel to draw.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + type
   Type of test pattern.
   + default
    0.0
   + type
    anything that is either float or ()->float
 + video.frei0r.test_pat_r
  Generates resolution test patterns (by Marko Cebokli).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?amplitude:'a,?aspect_type:'b,?channel:'c,
 ?freq_1:'d,?freq_2:'e,?lin_p_swp:bool,?manual_aspect:'f,
 ?type:'g)->source(audio=0,video=1,midi=0)
where
  'a, 'b, 'c, 'd, 'e, 'f, 'g is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + amplitude
   Amplitude (contrast) of the pattern.
   + default
    0.800000011921
   + type
    anything that is either float or ()->float
  + aspect_type
   Pixel aspect ratio presets.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + channel
   Into which color channel to draw.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + freq_1
   Pattern 7 H frequency.
   + default
    0.0299999993294
   + type
    anything that is either float or ()->float
  + freq_2
   Pattern 7 V frequency.
   + default
    0.0299999993294
   + type
    anything that is either float or ()->float
  + lin_p_swp
   Use linear period sweep.
   + default
    false
   + type
    bool
  + manual_aspect
   Manual pixel aspect ratio.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + type
   Type of test pattern.
   + default
    0.0
   + type
    anything that is either float or ()->float
 + video.frei0r.threelay0r
  Dynamic 3 level thresholding (by Hedde Bosman).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.threshold0r
  Thresholds a source image (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?threshold:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + threshold
   The threshold.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.timeout_indicator
  Timeout indicators e.g. for slides (by Simon A. Eugster).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?color:int,?time:'a,?transparency:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + color
   Indicator colour.
   + default
    0
   + type
    int
  + time
   Current time.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + transparency
   Indicator transparency.
   + default
    1.21257033663e-110
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.tint0r
  Tint a source image with specified color (by Maksim Golovkin).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?map_black_to:int,?map_white_to:int,
 ?tint_amount:'a,source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + map_black_to
   The color to map source color with null luminance.
   + default
    0
   + type
    int
  + map_white_to
   The color to map source color with full luminance.
   + default
    8388479
   + type
    int
  + tint_amount
   Amount of color.
   + default
    0.25
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.transparency
  Tunes the alpha channel (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?transparency:'a,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + transparency
   The transparency value.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.twolay0r
  Dynamic thresholding (by Martin Bayer).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.uv_map
  Uses Input 1 as UV Map to distort Input 2 (by Richard Spindler).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.value
  Perform a conversion to value only of the source input1 using the value of input2 (by Jean-Sebastien Senecal).
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c),
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.frei0r.vertigo
  Alpha blending with zoomed and rotated images (by Fukuchi Kentarou).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?phaseincrement:'a,?zoomrate:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + phaseincrement
   Phase increment.
   + default
    0.02
   + type
    anything that is either float or ()->float
  + zoomrate
   Zoomrate.
   + default
    0.202
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.frei0r.vignette
  Lens vignetting effect, applies natural vignetting (by Simon A. Eugster (Granjow)).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?aspect:'a,?clearcenter:'b,?soft:'c,
 source(audio='#d,video='#e+1,midi='#f))->
source(audio='#d,video='#e+1,midi='#f)
where 'a, 'b, 'c is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + aspect
   Aspect ratio.
   + default
    0.5
   + type
    anything that is either float or ()->float
  + clearcenter
   Size of the unaffected center.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + soft
   Softness.
   + default
    0.6
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#d,video='#e+1,midi='#f)
 + video.frei0r.white_balance
  Adjust the white balance / color temperature (by Dan Dennedy).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?green_tint:'a,?neutral_color:int,
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + green_tint
   Adjust the level of green..
   + default
    0.133333333333
   + type
    anything that is either float or ()->float
  + neutral_color
   Choose a color from the source image that should be white..
   + default
    16777215
   + type
    int
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.frei0r.xfade0r
  A simple xfader (by Martin Bayer).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?fader:'a,
 source(audio='#b,video='#c+1,midi='#d),
 source(audio='#b,video='#c+1,midi='#d))->
source(audio='#b,video='#c+1,midi='#d)
where 'a is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + fader
   the fader position.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#b,video='#c+1,midi='#d)
 + video.greyscale
  Convert video to greyscale.
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.invert
  Invert video.
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.lomo
  Emulate the "Lomo effect".
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.opacity
  Scale opacity of video.
  + _category
   Source / Video Processing
  + _type
   (?id:string,float,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   Coefficient to scale opacity with.
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.opacity.blur
  Blur opacity of video.
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.rotate
  Rotate video.
  + _category
   Source / Video Processing
  + _type
   (?id:string,?angle:'a,?speed:'b,
 source(audio='#c,video='#d+1,midi='#e))->
source(audio='#c,video='#d+1,midi='#e)
where 'a, 'b is either float or ()->float
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + angle
   Initial angle in radians.
   + default
    0.0
   + type
    anything that is either float or ()->float
  + speed
   Rotation speed in radians per sec.
   + default
    3.14159265359
   + type
    anything that is either float or ()->float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#c,video='#d+1,midi='#e)
 + video.scale
  Scale and translate video.
  + _category
   Source / Video Processing
  + _type
   (?id:string,?scale:float,?x:int,?xscale:float,?y:int,
 ?yscale:float,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + scale
   Scaling coefficient in both directions.
   + default
    1.0
   + type
    float
  + x
   x offset.
   + default
    0
   + type
    int
  + xscale
   x scaling.
   + default
    1.0
   + type
    float
  + y
   y offset.
   + default
    0
   + type
    int
  + yscale
   y scaling.
   + default
    1.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.sepia
  Convert video to sepia.
  + _category
   Source / Video Processing
  + _type
   (?id:string,source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.tile
  Tile sources (same as add but produces tiles of videos).
  + _category
   Source / Video Processing
  + _type
   (?id:string,?normalize:bool,?proportional:bool,
 ?weights:[int],[source(audio='#a,video='#b+1,midi='#c)])->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + normalize
   (no doc)
   + default
    true
   + type
    bool
  + proportional
   Scale preserving the proportions.
   + default
    true
   + type
    bool
  + weights
   Relative weight of the sources in the sum. The empty list stands for the homogeneous distribution.
   + default
    []
   + type
    [int]
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    [source(audio='#a,video='#b+1,midi='#c)]
 + video.transparent
  Set a color to be transparent.
  + _category
   Source / Video Processing
  + _type
   (?id:string,?color:int,?precision:float,
 source(audio='#a,video='#b+1,midi='#c))->
source(audio='#a,video='#b+1,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + color
   Color which should be transparent (in 0xRRGGBB format).
   + default
    0
   + type
    int
  + precision
   Precision in color matching (0. means match precisely the color and 1. means match every color).
   + default
    0.0
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a,video='#b+1,midi='#c)
 + video.volume
  Graphical visualization of the sound.
  + _category
   Source / Visualization
  + _type
   (?id:string,source(audio='#a+1,video=0,midi=0))->
source(audio='#a+1,video=1,midi=0)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video=0,midi=0)
 + vumeter
  VU meter (display the audio volume).
  + _category
   Source / Visualization
  + _type
   (?id:string,?scroll:bool,
 source(audio='#a+1,video='#b,midi='#c))->
source(audio='#a+1,video='#b,midi='#c)
  + id
   Force the value of the source ID.
   + default
    ""
   + type
    string
  + scroll
   Scroll.
   + default
    false
   + type
    bool
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    source(audio='#a+1,video='#b,midi='#c)
 + which
  which("progname") searches for an executable named "progname" using directories from the PATH environment variable and returns "" if it could not find one.
  + _category
   System
  + _type
   (string)->string
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
 + youtube_dl_protocol
  Register the youtube-dl protocol, using youtube-dl.
Syntax: youtube-dl:<ID>
  + _flag
   hidden
  + rlog
   (no doc)
   + default
    None
   + type
    (string)->'a
  + maxtime
   (no doc)
   + default
    None
   + type
    float
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    string
  + _type
   (rlog:((string)->'a),maxtime:float,string)->[string]
 + ~-
  Returns the opposite of its argument.
  + _category
   Math
  + _type
   ('a)->'a where 'a is a number type
  + (unlabeled)
   (no doc)
   + default
    None
   + type
    anything that is a number type
+ stream decoding
 Stream decoding methods.
 + AIFF
  Decode a AIFF stream with an appropriate MIME type.
 + MAD
  Use libmad to decode any stream with an appropriate MIME type.
 + OGG
  Decode as OGG any stream with an appropriate MIME type.
 + PCM/BASIC
  Decode audio/basic as headerless stereo U8 PCM at 8kHz.
 + RAW AUDIO
  Decode audio/x-raw.
 + WAV
  Decode a WAV stream with an appropriate MIME type.
+ stream encoding formats
 Methods to encode streams.
 + AVI
  (no doc)
 + EXTERNAL
  (no doc)
 + MP3/LIBLAME/BUILTIN
  (no doc)
 + OGG
  (no doc)
 + WAV
  (no doc)
+ video converters
 Methods for converting video frames.
 + ffmpeg
  (no doc)
 + gavl
  (no doc)
 + native
  (no doc)
